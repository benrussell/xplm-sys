/* automatically generated by rust-bindgen */

// Copyright (c) 2015 xplm-sys developers
// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT
// license <LICENSE-MIT or http://opensource.org/licenses/MIT>,
// at your option. All files in the project carrying such
// notice may not be copied, modified, or distributed except
// according to those terms.

pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201605;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 24;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const XPLM_NO_PLUGIN_ID: ::std::os::raw::c_int = -1;
pub const XPLM_PLUGIN_XPLANE: ::std::os::raw::c_uint = 0;
pub const kXPLM_Version: ::std::os::raw::c_uint = 210;
pub const XPLM_KEY_RETURN: ::std::os::raw::c_uint = 13;
pub const XPLM_KEY_ESCAPE: ::std::os::raw::c_uint = 27;
pub const XPLM_KEY_TAB: ::std::os::raw::c_uint = 9;
pub const XPLM_KEY_DELETE: ::std::os::raw::c_uint = 8;
pub const XPLM_KEY_LEFT: ::std::os::raw::c_uint = 28;
pub const XPLM_KEY_RIGHT: ::std::os::raw::c_uint = 29;
pub const XPLM_KEY_UP: ::std::os::raw::c_uint = 30;
pub const XPLM_KEY_DOWN: ::std::os::raw::c_uint = 31;
pub const XPLM_KEY_0: ::std::os::raw::c_uint = 48;
pub const XPLM_KEY_1: ::std::os::raw::c_uint = 49;
pub const XPLM_KEY_2: ::std::os::raw::c_uint = 50;
pub const XPLM_KEY_3: ::std::os::raw::c_uint = 51;
pub const XPLM_KEY_4: ::std::os::raw::c_uint = 52;
pub const XPLM_KEY_5: ::std::os::raw::c_uint = 53;
pub const XPLM_KEY_6: ::std::os::raw::c_uint = 54;
pub const XPLM_KEY_7: ::std::os::raw::c_uint = 55;
pub const XPLM_KEY_8: ::std::os::raw::c_uint = 56;
pub const XPLM_KEY_9: ::std::os::raw::c_uint = 57;
pub const XPLM_KEY_DECIMAL: ::std::os::raw::c_uint = 46;
pub const XPLM_VK_BACK: ::std::os::raw::c_uint = 8;
pub const XPLM_VK_TAB: ::std::os::raw::c_uint = 9;
pub const XPLM_VK_CLEAR: ::std::os::raw::c_uint = 12;
pub const XPLM_VK_RETURN: ::std::os::raw::c_uint = 13;
pub const XPLM_VK_ESCAPE: ::std::os::raw::c_uint = 27;
pub const XPLM_VK_SPACE: ::std::os::raw::c_uint = 32;
pub const XPLM_VK_PRIOR: ::std::os::raw::c_uint = 33;
pub const XPLM_VK_NEXT: ::std::os::raw::c_uint = 34;
pub const XPLM_VK_END: ::std::os::raw::c_uint = 35;
pub const XPLM_VK_HOME: ::std::os::raw::c_uint = 36;
pub const XPLM_VK_LEFT: ::std::os::raw::c_uint = 37;
pub const XPLM_VK_UP: ::std::os::raw::c_uint = 38;
pub const XPLM_VK_RIGHT: ::std::os::raw::c_uint = 39;
pub const XPLM_VK_DOWN: ::std::os::raw::c_uint = 40;
pub const XPLM_VK_SELECT: ::std::os::raw::c_uint = 41;
pub const XPLM_VK_PRINT: ::std::os::raw::c_uint = 42;
pub const XPLM_VK_EXECUTE: ::std::os::raw::c_uint = 43;
pub const XPLM_VK_SNAPSHOT: ::std::os::raw::c_uint = 44;
pub const XPLM_VK_INSERT: ::std::os::raw::c_uint = 45;
pub const XPLM_VK_DELETE: ::std::os::raw::c_uint = 46;
pub const XPLM_VK_HELP: ::std::os::raw::c_uint = 47;
pub const XPLM_VK_0: ::std::os::raw::c_uint = 48;
pub const XPLM_VK_1: ::std::os::raw::c_uint = 49;
pub const XPLM_VK_2: ::std::os::raw::c_uint = 50;
pub const XPLM_VK_3: ::std::os::raw::c_uint = 51;
pub const XPLM_VK_4: ::std::os::raw::c_uint = 52;
pub const XPLM_VK_5: ::std::os::raw::c_uint = 53;
pub const XPLM_VK_6: ::std::os::raw::c_uint = 54;
pub const XPLM_VK_7: ::std::os::raw::c_uint = 55;
pub const XPLM_VK_8: ::std::os::raw::c_uint = 56;
pub const XPLM_VK_9: ::std::os::raw::c_uint = 57;
pub const XPLM_VK_A: ::std::os::raw::c_uint = 65;
pub const XPLM_VK_B: ::std::os::raw::c_uint = 66;
pub const XPLM_VK_C: ::std::os::raw::c_uint = 67;
pub const XPLM_VK_D: ::std::os::raw::c_uint = 68;
pub const XPLM_VK_E: ::std::os::raw::c_uint = 69;
pub const XPLM_VK_F: ::std::os::raw::c_uint = 70;
pub const XPLM_VK_G: ::std::os::raw::c_uint = 71;
pub const XPLM_VK_H: ::std::os::raw::c_uint = 72;
pub const XPLM_VK_I: ::std::os::raw::c_uint = 73;
pub const XPLM_VK_J: ::std::os::raw::c_uint = 74;
pub const XPLM_VK_K: ::std::os::raw::c_uint = 75;
pub const XPLM_VK_L: ::std::os::raw::c_uint = 76;
pub const XPLM_VK_M: ::std::os::raw::c_uint = 77;
pub const XPLM_VK_N: ::std::os::raw::c_uint = 78;
pub const XPLM_VK_O: ::std::os::raw::c_uint = 79;
pub const XPLM_VK_P: ::std::os::raw::c_uint = 80;
pub const XPLM_VK_Q: ::std::os::raw::c_uint = 81;
pub const XPLM_VK_R: ::std::os::raw::c_uint = 82;
pub const XPLM_VK_S: ::std::os::raw::c_uint = 83;
pub const XPLM_VK_T: ::std::os::raw::c_uint = 84;
pub const XPLM_VK_U: ::std::os::raw::c_uint = 85;
pub const XPLM_VK_V: ::std::os::raw::c_uint = 86;
pub const XPLM_VK_W: ::std::os::raw::c_uint = 87;
pub const XPLM_VK_X: ::std::os::raw::c_uint = 88;
pub const XPLM_VK_Y: ::std::os::raw::c_uint = 89;
pub const XPLM_VK_Z: ::std::os::raw::c_uint = 90;
pub const XPLM_VK_NUMPAD0: ::std::os::raw::c_uint = 96;
pub const XPLM_VK_NUMPAD1: ::std::os::raw::c_uint = 97;
pub const XPLM_VK_NUMPAD2: ::std::os::raw::c_uint = 98;
pub const XPLM_VK_NUMPAD3: ::std::os::raw::c_uint = 99;
pub const XPLM_VK_NUMPAD4: ::std::os::raw::c_uint = 100;
pub const XPLM_VK_NUMPAD5: ::std::os::raw::c_uint = 101;
pub const XPLM_VK_NUMPAD6: ::std::os::raw::c_uint = 102;
pub const XPLM_VK_NUMPAD7: ::std::os::raw::c_uint = 103;
pub const XPLM_VK_NUMPAD8: ::std::os::raw::c_uint = 104;
pub const XPLM_VK_NUMPAD9: ::std::os::raw::c_uint = 105;
pub const XPLM_VK_MULTIPLY: ::std::os::raw::c_uint = 106;
pub const XPLM_VK_ADD: ::std::os::raw::c_uint = 107;
pub const XPLM_VK_SEPARATOR: ::std::os::raw::c_uint = 108;
pub const XPLM_VK_SUBTRACT: ::std::os::raw::c_uint = 109;
pub const XPLM_VK_DECIMAL: ::std::os::raw::c_uint = 110;
pub const XPLM_VK_DIVIDE: ::std::os::raw::c_uint = 111;
pub const XPLM_VK_F1: ::std::os::raw::c_uint = 112;
pub const XPLM_VK_F2: ::std::os::raw::c_uint = 113;
pub const XPLM_VK_F3: ::std::os::raw::c_uint = 114;
pub const XPLM_VK_F4: ::std::os::raw::c_uint = 115;
pub const XPLM_VK_F5: ::std::os::raw::c_uint = 116;
pub const XPLM_VK_F6: ::std::os::raw::c_uint = 117;
pub const XPLM_VK_F7: ::std::os::raw::c_uint = 118;
pub const XPLM_VK_F8: ::std::os::raw::c_uint = 119;
pub const XPLM_VK_F9: ::std::os::raw::c_uint = 120;
pub const XPLM_VK_F10: ::std::os::raw::c_uint = 121;
pub const XPLM_VK_F11: ::std::os::raw::c_uint = 122;
pub const XPLM_VK_F12: ::std::os::raw::c_uint = 123;
pub const XPLM_VK_F13: ::std::os::raw::c_uint = 124;
pub const XPLM_VK_F14: ::std::os::raw::c_uint = 125;
pub const XPLM_VK_F15: ::std::os::raw::c_uint = 126;
pub const XPLM_VK_F16: ::std::os::raw::c_uint = 127;
pub const XPLM_VK_F17: ::std::os::raw::c_uint = 128;
pub const XPLM_VK_F18: ::std::os::raw::c_uint = 129;
pub const XPLM_VK_F19: ::std::os::raw::c_uint = 130;
pub const XPLM_VK_F20: ::std::os::raw::c_uint = 131;
pub const XPLM_VK_F21: ::std::os::raw::c_uint = 132;
pub const XPLM_VK_F22: ::std::os::raw::c_uint = 133;
pub const XPLM_VK_F23: ::std::os::raw::c_uint = 134;
pub const XPLM_VK_F24: ::std::os::raw::c_uint = 135;
pub const XPLM_VK_EQUAL: ::std::os::raw::c_uint = 176;
pub const XPLM_VK_MINUS: ::std::os::raw::c_uint = 177;
pub const XPLM_VK_RBRACE: ::std::os::raw::c_uint = 178;
pub const XPLM_VK_LBRACE: ::std::os::raw::c_uint = 179;
pub const XPLM_VK_QUOTE: ::std::os::raw::c_uint = 180;
pub const XPLM_VK_SEMICOLON: ::std::os::raw::c_uint = 181;
pub const XPLM_VK_BACKSLASH: ::std::os::raw::c_uint = 182;
pub const XPLM_VK_COMMA: ::std::os::raw::c_uint = 183;
pub const XPLM_VK_SLASH: ::std::os::raw::c_uint = 184;
pub const XPLM_VK_PERIOD: ::std::os::raw::c_uint = 185;
pub const XPLM_VK_BACKQUOTE: ::std::os::raw::c_uint = 186;
pub const XPLM_VK_ENTER: ::std::os::raw::c_uint = 187;
pub const XPLM_VK_NUMPAD_ENT: ::std::os::raw::c_uint = 188;
pub const XPLM_VK_NUMPAD_EQ: ::std::os::raw::c_uint = 189;
pub const xpWidgetClass_None: ::std::os::raw::c_uint = 0;
pub const xpWidgetClass_MainWindow: ::std::os::raw::c_uint = 1;
pub const xpWidgetClass_SubWindow: ::std::os::raw::c_uint = 2;
pub const xpWidgetClass_Button: ::std::os::raw::c_uint = 3;
pub const xpWidgetClass_TextField: ::std::os::raw::c_uint = 4;
pub const xpWidgetClass_ScrollBar: ::std::os::raw::c_uint = 5;
pub const xpWidgetClass_Caption: ::std::os::raw::c_uint = 6;
pub const xpWidgetClass_GeneralGraphics: ::std::os::raw::c_uint = 7;
pub const xpWidgetClass_Progress: ::std::os::raw::c_uint = 8;
pub const NO_PARENT: ::std::os::raw::c_int = -1;
pub const PARAM_PARENT: ::std::os::raw::c_int = -2;
pub const XPLM_MAP_USER_INTERFACE: &'static [u8; 24usize] = b"XPLM_MAP_USER_INTERFACE\0";
pub const XPLM_MAP_IOS: &'static [u8; 13usize] = b"XPLM_MAP_IOS\0";
pub const XPLM_NAV_NOT_FOUND: ::std::os::raw::c_int = -1;
pub const XPLM_USER_AIRCRAFT: ::std::os::raw::c_uint = 0;
pub const XPLM_MSG_PLANE_CRASHED: ::std::os::raw::c_uint = 101;
pub const XPLM_MSG_PLANE_LOADED: ::std::os::raw::c_uint = 102;
pub const XPLM_MSG_AIRPORT_LOADED: ::std::os::raw::c_uint = 103;
pub const XPLM_MSG_SCENERY_LOADED: ::std::os::raw::c_uint = 104;
pub const XPLM_MSG_AIRPLANE_COUNT_CHANGED: ::std::os::raw::c_uint = 105;
pub const XPLM_MSG_PLANE_UNLOADED: ::std::os::raw::c_uint = 106;
pub const XPLM_MSG_WILL_WRITE_PREFS: ::std::os::raw::c_uint = 107;
pub const XPLM_MSG_LIVERY_LOADED: ::std::os::raw::c_uint = 108;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
/// GLOBAL DEFINITIONS
pub type XPLMPluginID = ::std::os::raw::c_int;
pub const xplm_ShiftFlag: _bindgen_ty_1 = 1;
pub const xplm_OptionAltFlag: _bindgen_ty_1 = 2;
pub const xplm_ControlFlag: _bindgen_ty_1 = 4;
pub const xplm_DownFlag: _bindgen_ty_1 = 8;
pub const xplm_UpFlag: _bindgen_ty_1 = 16;
pub type _bindgen_ty_1 = u32;
pub type XPLMKeyFlags = ::std::os::raw::c_int;
/// WIDGET DEFINITIONS
pub type XPWidgetID = *mut ::std::os::raw::c_void;
pub const xpProperty_Refcon: _bindgen_ty_2 = 0;
pub const xpProperty_Dragging: _bindgen_ty_2 = 1;
pub const xpProperty_DragXOff: _bindgen_ty_2 = 2;
pub const xpProperty_DragYOff: _bindgen_ty_2 = 3;
pub const xpProperty_Hilited: _bindgen_ty_2 = 4;
pub const xpProperty_Object: _bindgen_ty_2 = 5;
pub const xpProperty_Clip: _bindgen_ty_2 = 6;
pub const xpProperty_Enabled: _bindgen_ty_2 = 7;
pub const xpProperty_UserStart: _bindgen_ty_2 = 10000;
pub type _bindgen_ty_2 = u32;
pub type XPWidgetPropertyID = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPMouseState_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub button: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPKeyState_t {
    pub key: ::std::os::raw::c_char,
    pub flags: XPLMKeyFlags,
    pub vkey: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPWidgetGeometryChange_t {
    pub dx: ::std::os::raw::c_int,
    pub dy: ::std::os::raw::c_int,
    pub dwidth: ::std::os::raw::c_int,
    pub dheight: ::std::os::raw::c_int,
}
pub const xpMode_Direct: _bindgen_ty_3 = 0;
pub const xpMode_UpChain: _bindgen_ty_3 = 1;
pub const xpMode_Recursive: _bindgen_ty_3 = 2;
pub const xpMode_DirectAllCallbacks: _bindgen_ty_3 = 3;
pub const xpMode_Once: _bindgen_ty_3 = 4;
pub type _bindgen_ty_3 = u32;
pub type XPDispatchMode = ::std::os::raw::c_int;
pub type XPWidgetClass = ::std::os::raw::c_int;
pub const xpMsg_None: _bindgen_ty_4 = 0;
pub const xpMsg_Create: _bindgen_ty_4 = 1;
pub const xpMsg_Destroy: _bindgen_ty_4 = 2;
pub const xpMsg_Paint: _bindgen_ty_4 = 3;
pub const xpMsg_Draw: _bindgen_ty_4 = 4;
pub const xpMsg_KeyPress: _bindgen_ty_4 = 5;
pub const xpMsg_KeyTakeFocus: _bindgen_ty_4 = 6;
pub const xpMsg_KeyLoseFocus: _bindgen_ty_4 = 7;
pub const xpMsg_MouseDown: _bindgen_ty_4 = 8;
pub const xpMsg_MouseDrag: _bindgen_ty_4 = 9;
pub const xpMsg_MouseUp: _bindgen_ty_4 = 10;
pub const xpMsg_Reshape: _bindgen_ty_4 = 11;
pub const xpMsg_ExposedChanged: _bindgen_ty_4 = 12;
pub const xpMsg_AcceptChild: _bindgen_ty_4 = 13;
pub const xpMsg_LoseChild: _bindgen_ty_4 = 14;
pub const xpMsg_AcceptParent: _bindgen_ty_4 = 15;
pub const xpMsg_Shown: _bindgen_ty_4 = 16;
pub const xpMsg_Hidden: _bindgen_ty_4 = 17;
pub const xpMsg_DescriptorChanged: _bindgen_ty_4 = 18;
pub const xpMsg_PropertyChanged: _bindgen_ty_4 = 19;
pub const xpMsg_MouseWheel: _bindgen_ty_4 = 20;
pub const xpMsg_CursorAdjust: _bindgen_ty_4 = 21;
pub const xpMsg_UserStart: _bindgen_ty_4 = 10000;
pub type _bindgen_ty_4 = u32;
pub type XPWidgetMessage = ::std::os::raw::c_int;
/// WIDGET CALLBACK FUNCTION
pub type XPWidgetFunc_t = ::std::option::Option<
    unsafe extern "C" fn(inMessage: XPWidgetMessage,
                         inWidget: XPWidgetID,
                         inParam1: isize,
                         inParam2: isize)
                         -> ::std::os::raw::c_int,
>;
pub const xpMainWindowStyle_MainWindow: _bindgen_ty_5 = 0;
pub const xpMainWindowStyle_Translucent: _bindgen_ty_5 = 1;
pub type _bindgen_ty_5 = u32;
pub const xpProperty_MainWindowType: _bindgen_ty_6 = 1100;
pub const xpProperty_MainWindowHasCloseBoxes: _bindgen_ty_6 = 1200;
pub type _bindgen_ty_6 = u32;
pub const xpMessage_CloseButtonPushed: _bindgen_ty_7 = 1200;
pub type _bindgen_ty_7 = u32;
pub const xpSubWindowStyle_SubWindow: _bindgen_ty_8 = 0;
pub const xpSubWindowStyle_Screen: _bindgen_ty_8 = 2;
pub const xpSubWindowStyle_ListView: _bindgen_ty_8 = 3;
pub type _bindgen_ty_8 = u32;
pub const xpProperty_SubWindowType: _bindgen_ty_9 = 1200;
pub type _bindgen_ty_9 = u32;
pub const xpPushButton: _bindgen_ty_10 = 0;
pub const xpRadioButton: _bindgen_ty_10 = 1;
pub const xpWindowCloseBox: _bindgen_ty_10 = 3;
pub const xpLittleDownArrow: _bindgen_ty_10 = 5;
pub const xpLittleUpArrow: _bindgen_ty_10 = 6;
pub type _bindgen_ty_10 = u32;
pub const xpButtonBehaviorPushButton: _bindgen_ty_11 = 0;
pub const xpButtonBehaviorCheckBox: _bindgen_ty_11 = 1;
pub const xpButtonBehaviorRadioButton: _bindgen_ty_11 = 2;
pub type _bindgen_ty_11 = u32;
pub const xpProperty_ButtonType: _bindgen_ty_12 = 1300;
pub const xpProperty_ButtonBehavior: _bindgen_ty_12 = 1301;
pub const xpProperty_ButtonState: _bindgen_ty_12 = 1302;
pub type _bindgen_ty_12 = u32;
pub const xpMsg_PushButtonPressed: _bindgen_ty_13 = 1300;
pub const xpMsg_ButtonStateChanged: _bindgen_ty_13 = 1301;
pub type _bindgen_ty_13 = u32;
pub const xpTextEntryField: _bindgen_ty_14 = 0;
pub const xpTextTransparent: _bindgen_ty_14 = 3;
pub const xpTextTranslucent: _bindgen_ty_14 = 4;
pub type _bindgen_ty_14 = u32;
pub const xpProperty_EditFieldSelStart: _bindgen_ty_15 = 1400;
pub const xpProperty_EditFieldSelEnd: _bindgen_ty_15 = 1401;
pub const xpProperty_EditFieldSelDragStart: _bindgen_ty_15 = 1402;
pub const xpProperty_TextFieldType: _bindgen_ty_15 = 1403;
pub const xpProperty_PasswordMode: _bindgen_ty_15 = 1404;
pub const xpProperty_MaxCharacters: _bindgen_ty_15 = 1405;
pub const xpProperty_ScrollPosition: _bindgen_ty_15 = 1406;
pub const xpProperty_Font: _bindgen_ty_15 = 1407;
pub const xpProperty_ActiveEditSide: _bindgen_ty_15 = 1408;
pub type _bindgen_ty_15 = u32;
pub const xpMsg_TextFieldChanged: _bindgen_ty_16 = 1400;
pub type _bindgen_ty_16 = u32;
pub const xpScrollBarTypeScrollBar: _bindgen_ty_17 = 0;
pub const xpScrollBarTypeSlider: _bindgen_ty_17 = 1;
pub type _bindgen_ty_17 = u32;
pub const xpProperty_ScrollBarSliderPosition: _bindgen_ty_18 = 1500;
pub const xpProperty_ScrollBarMin: _bindgen_ty_18 = 1501;
pub const xpProperty_ScrollBarMax: _bindgen_ty_18 = 1502;
pub const xpProperty_ScrollBarPageAmount: _bindgen_ty_18 = 1503;
pub const xpProperty_ScrollBarType: _bindgen_ty_18 = 1504;
pub const xpProperty_ScrollBarSlop: _bindgen_ty_18 = 1505;
pub type _bindgen_ty_18 = u32;
pub const xpMsg_ScrollBarSliderPositionChanged: _bindgen_ty_19 = 1500;
pub type _bindgen_ty_19 = u32;
pub const xpProperty_CaptionLit: _bindgen_ty_20 = 1600;
pub type _bindgen_ty_20 = u32;
pub const xpShip: _bindgen_ty_21 = 4;
pub const xpILSGlideScope: _bindgen_ty_21 = 5;
pub const xpMarkerLeft: _bindgen_ty_21 = 6;
pub const xp_Airport: _bindgen_ty_21 = 7;
pub const xpNDB: _bindgen_ty_21 = 8;
pub const xpVOR: _bindgen_ty_21 = 9;
pub const xpRadioTower: _bindgen_ty_21 = 10;
pub const xpAircraftCarrier: _bindgen_ty_21 = 11;
pub const xpFire: _bindgen_ty_21 = 12;
pub const xpMarkerRight: _bindgen_ty_21 = 13;
pub const xpCustomObject: _bindgen_ty_21 = 14;
pub const xpCoolingTower: _bindgen_ty_21 = 15;
pub const xpSmokeStack: _bindgen_ty_21 = 16;
pub const xpBuilding: _bindgen_ty_21 = 17;
pub const xpPowerLine: _bindgen_ty_21 = 18;
pub const xpVORWithCompassRose: _bindgen_ty_21 = 19;
pub const xpOilPlatform: _bindgen_ty_21 = 21;
pub const xpOilPlatformSmall: _bindgen_ty_21 = 22;
pub const xpWayPoint: _bindgen_ty_21 = 23;
pub type _bindgen_ty_21 = u32;
pub const xpProperty_GeneralGraphicsType: _bindgen_ty_22 = 1700;
pub type _bindgen_ty_22 = u32;
pub const xpProperty_ProgressPosition: _bindgen_ty_23 = 1800;
pub const xpProperty_ProgressMin: _bindgen_ty_23 = 1801;
pub const xpProperty_ProgressMax: _bindgen_ty_23 = 1802;
pub type _bindgen_ty_23 = u32;
pub const xpWindow_Help: _bindgen_ty_24 = 0;
pub const xpWindow_MainWindow: _bindgen_ty_24 = 1;
pub const xpWindow_SubWindow: _bindgen_ty_24 = 2;
pub const xpWindow_Screen: _bindgen_ty_24 = 4;
pub const xpWindow_ListView: _bindgen_ty_24 = 5;
pub type _bindgen_ty_24 = u32;
pub type XPWindowStyle = ::std::os::raw::c_int;
extern "C" {
    pub fn XPDrawWindow(
        inX1: ::std::os::raw::c_int,
        inY1: ::std::os::raw::c_int,
        inX2: ::std::os::raw::c_int,
        inY2: ::std::os::raw::c_int,
        inStyle: XPWindowStyle,
    );
}
extern "C" {
    pub fn XPGetWindowDefaultDimensions(
        inStyle: XPWindowStyle,
        outWidth: *mut ::std::os::raw::c_int,
        outHeight: *mut ::std::os::raw::c_int,
    );
}
pub const xpElement_TextField: _bindgen_ty_25 = 6;
pub const xpElement_CheckBox: _bindgen_ty_25 = 9;
pub const xpElement_CheckBoxLit: _bindgen_ty_25 = 10;
pub const xpElement_WindowCloseBox: _bindgen_ty_25 = 14;
pub const xpElement_WindowCloseBoxPressed: _bindgen_ty_25 = 15;
pub const xpElement_PushButton: _bindgen_ty_25 = 16;
pub const xpElement_PushButtonLit: _bindgen_ty_25 = 17;
pub const xpElement_OilPlatform: _bindgen_ty_25 = 24;
pub const xpElement_OilPlatformSmall: _bindgen_ty_25 = 25;
pub const xpElement_Ship: _bindgen_ty_25 = 26;
pub const xpElement_ILSGlideScope: _bindgen_ty_25 = 27;
pub const xpElement_MarkerLeft: _bindgen_ty_25 = 28;
pub const xpElement_Airport: _bindgen_ty_25 = 29;
pub const xpElement_Waypoint: _bindgen_ty_25 = 30;
pub const xpElement_NDB: _bindgen_ty_25 = 31;
pub const xpElement_VOR: _bindgen_ty_25 = 32;
pub const xpElement_RadioTower: _bindgen_ty_25 = 33;
pub const xpElement_AircraftCarrier: _bindgen_ty_25 = 34;
pub const xpElement_Fire: _bindgen_ty_25 = 35;
pub const xpElement_MarkerRight: _bindgen_ty_25 = 36;
pub const xpElement_CustomObject: _bindgen_ty_25 = 37;
pub const xpElement_CoolingTower: _bindgen_ty_25 = 38;
pub const xpElement_SmokeStack: _bindgen_ty_25 = 39;
pub const xpElement_Building: _bindgen_ty_25 = 40;
pub const xpElement_PowerLine: _bindgen_ty_25 = 41;
pub const xpElement_CopyButtons: _bindgen_ty_25 = 45;
pub const xpElement_CopyButtonsWithEditingGrid: _bindgen_ty_25 = 46;
pub const xpElement_EditingGrid: _bindgen_ty_25 = 47;
pub const xpElement_ScrollBar: _bindgen_ty_25 = 48;
pub const xpElement_VORWithCompassRose: _bindgen_ty_25 = 49;
pub const xpElement_Zoomer: _bindgen_ty_25 = 51;
pub const xpElement_TextFieldMiddle: _bindgen_ty_25 = 52;
pub const xpElement_LittleDownArrow: _bindgen_ty_25 = 53;
pub const xpElement_LittleUpArrow: _bindgen_ty_25 = 54;
pub const xpElement_WindowDragBar: _bindgen_ty_25 = 61;
pub const xpElement_WindowDragBarSmooth: _bindgen_ty_25 = 62;
pub type _bindgen_ty_25 = u32;
pub type XPElementStyle = ::std::os::raw::c_int;
extern "C" {
    pub fn XPDrawElement(
        inX1: ::std::os::raw::c_int,
        inY1: ::std::os::raw::c_int,
        inX2: ::std::os::raw::c_int,
        inY2: ::std::os::raw::c_int,
        inStyle: XPElementStyle,
        inLit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPGetElementDefaultDimensions(
        inStyle: XPElementStyle,
        outWidth: *mut ::std::os::raw::c_int,
        outHeight: *mut ::std::os::raw::c_int,
        outCanBeLit: *mut ::std::os::raw::c_int,
    );
}
pub const xpTrack_ScrollBar: _bindgen_ty_26 = 0;
pub const xpTrack_Slider: _bindgen_ty_26 = 1;
pub const xpTrack_Progress: _bindgen_ty_26 = 2;
pub type _bindgen_ty_26 = u32;
pub type XPTrackStyle = ::std::os::raw::c_int;
extern "C" {
    pub fn XPDrawTrack(
        inX1: ::std::os::raw::c_int,
        inY1: ::std::os::raw::c_int,
        inX2: ::std::os::raw::c_int,
        inY2: ::std::os::raw::c_int,
        inMin: ::std::os::raw::c_int,
        inMax: ::std::os::raw::c_int,
        inValue: ::std::os::raw::c_int,
        inTrackStyle: XPTrackStyle,
        inLit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPGetTrackDefaultDimensions(
        inStyle: XPTrackStyle,
        outWidth: *mut ::std::os::raw::c_int,
        outCanBeLit: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPGetTrackMetrics(
        inX1: ::std::os::raw::c_int,
        inY1: ::std::os::raw::c_int,
        inX2: ::std::os::raw::c_int,
        inY2: ::std::os::raw::c_int,
        inMin: ::std::os::raw::c_int,
        inMax: ::std::os::raw::c_int,
        inValue: ::std::os::raw::c_int,
        inTrackStyle: XPTrackStyle,
        outIsVertical: *mut ::std::os::raw::c_int,
        outDownBtnSize: *mut ::std::os::raw::c_int,
        outDownPageSize: *mut ::std::os::raw::c_int,
        outThumbSize: *mut ::std::os::raw::c_int,
        outUpPageSize: *mut ::std::os::raw::c_int,
        outUpBtnSize: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPCreateWidget(
        inLeft: ::std::os::raw::c_int,
        inTop: ::std::os::raw::c_int,
        inRight: ::std::os::raw::c_int,
        inBottom: ::std::os::raw::c_int,
        inVisible: ::std::os::raw::c_int,
        inDescriptor: *const ::std::os::raw::c_char,
        inIsRoot: ::std::os::raw::c_int,
        inContainer: XPWidgetID,
        inClass: XPWidgetClass,
    ) -> XPWidgetID;
}
extern "C" {
    pub fn XPCreateCustomWidget(
        inLeft: ::std::os::raw::c_int,
        inTop: ::std::os::raw::c_int,
        inRight: ::std::os::raw::c_int,
        inBottom: ::std::os::raw::c_int,
        inVisible: ::std::os::raw::c_int,
        inDescriptor: *const ::std::os::raw::c_char,
        inIsRoot: ::std::os::raw::c_int,
        inContainer: XPWidgetID,
        inCallback: XPWidgetFunc_t,
    ) -> XPWidgetID;
}
extern "C" {
    pub fn XPDestroyWidget(inWidget: XPWidgetID, inDestroyChildren: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XPSendMessageToWidget(
        inWidget: XPWidgetID,
        inMessage: XPWidgetMessage,
        inMode: XPDispatchMode,
        inParam1: isize,
        inParam2: isize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// WIDGET POSITIONING AND VISIBILITY
    pub fn XPPlaceWidgetWithin(inSubWidget: XPWidgetID, inContainer: XPWidgetID);
}
extern "C" {
    pub fn XPCountChildWidgets(inWidget: XPWidgetID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPGetNthChildWidget(inWidget: XPWidgetID, inIndex: ::std::os::raw::c_int) -> XPWidgetID;
}
extern "C" {
    pub fn XPGetParentWidget(inWidget: XPWidgetID) -> XPWidgetID;
}
extern "C" {
    pub fn XPShowWidget(inWidget: XPWidgetID);
}
extern "C" {
    pub fn XPHideWidget(inWidget: XPWidgetID);
}
extern "C" {
    pub fn XPIsWidgetVisible(inWidget: XPWidgetID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPFindRootWidget(inWidget: XPWidgetID) -> XPWidgetID;
}
extern "C" {
    pub fn XPBringRootWidgetToFront(inWidget: XPWidgetID);
}
extern "C" {
    pub fn XPIsWidgetInFront(inWidget: XPWidgetID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPGetWidgetGeometry(
        inWidget: XPWidgetID,
        outLeft: *mut ::std::os::raw::c_int,
        outTop: *mut ::std::os::raw::c_int,
        outRight: *mut ::std::os::raw::c_int,
        outBottom: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPSetWidgetGeometry(
        inWidget: XPWidgetID,
        inLeft: ::std::os::raw::c_int,
        inTop: ::std::os::raw::c_int,
        inRight: ::std::os::raw::c_int,
        inBottom: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPGetWidgetForLocation(
        inContainer: XPWidgetID,
        inXOffset: ::std::os::raw::c_int,
        inYOffset: ::std::os::raw::c_int,
        inRecursive: ::std::os::raw::c_int,
        inVisibleOnly: ::std::os::raw::c_int,
    ) -> XPWidgetID;
}
extern "C" {
    pub fn XPGetWidgetExposedGeometry(
        inWidgetID: XPWidgetID,
        outLeft: *mut ::std::os::raw::c_int,
        outTop: *mut ::std::os::raw::c_int,
        outRight: *mut ::std::os::raw::c_int,
        outBottom: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPSetWidgetDescriptor(inWidget: XPWidgetID, inDescriptor: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn XPGetWidgetDescriptor(
        inWidget: XPWidgetID,
        outDescriptor: *mut ::std::os::raw::c_char,
        inMaxDescLength: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPSetWidgetProperty(
        inWidget: XPWidgetID,
        inProperty: XPWidgetPropertyID,
        inValue: isize,
    );
}
extern "C" {
    pub fn XPGetWidgetProperty(
        inWidget: XPWidgetID,
        inProperty: XPWidgetPropertyID,
        inExists: *mut ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    /// KEYBOARD MANAGEMENT
    pub fn XPSetKeyboardFocus(inWidget: XPWidgetID) -> XPWidgetID;
}
extern "C" {
    pub fn XPLoseKeyboardFocus(inWidget: XPWidgetID);
}
extern "C" {
    pub fn XPGetWidgetWithFocus() -> XPWidgetID;
}
extern "C" {
    pub fn XPAddWidgetCallback(inWidget: XPWidgetID, inNewCallback: XPWidgetFunc_t);
}
extern "C" {
    pub fn XPGetWidgetClassFunc(inWidgetClass: XPWidgetClass) -> XPWidgetFunc_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPWidgetCreate_t {
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub visible: ::std::os::raw::c_int,
    pub descriptor: *const ::std::os::raw::c_char,
    pub isRoot: ::std::os::raw::c_int,
    pub containerIndex: ::std::os::raw::c_int,
    pub widgetClass: XPWidgetClass,
}
extern "C" {
    pub fn XPUCreateWidgets(
        inWidgetDefs: *const XPWidgetCreate_t,
        inCount: ::std::os::raw::c_int,
        inParamParent: XPWidgetID,
        ioWidgets: *mut XPWidgetID,
    );
}
extern "C" {
    pub fn XPUMoveWidgetBy(
        inWidget: XPWidgetID,
        inDeltaX: ::std::os::raw::c_int,
        inDeltaY: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// LAYOUT MANAGERS
    pub fn XPUFixedLayout(
        inMessage: XPWidgetMessage,
        inWidget: XPWidgetID,
        inParam1: isize,
        inParam2: isize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPUSelectIfNeeded(
        inMessage: XPWidgetMessage,
        inWidget: XPWidgetID,
        inParam1: isize,
        inParam2: isize,
        inEatClick: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPUDefocusKeyboard(
        inMessage: XPWidgetMessage,
        inWidget: XPWidgetID,
        inParam1: isize,
        inParam2: isize,
        inEatClick: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPUDragWidget(
        inMessage: XPWidgetMessage,
        inWidget: XPWidgetID,
        inParam1: isize,
        inParam2: isize,
        inLeft: ::std::os::raw::c_int,
        inTop: ::std::os::raw::c_int,
        inRight: ::std::os::raw::c_int,
        inBottom: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const xplm_ControlCameraUntilViewChanges: _bindgen_ty_27 = 1;
pub const xplm_ControlCameraForever: _bindgen_ty_27 = 2;
pub type _bindgen_ty_27 = u32;
pub type XPLMCameraControlDuration = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPLMCameraPosition_t {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub pitch: f32,
    pub heading: f32,
    pub roll: f32,
    pub zoom: f32,
}
pub type XPLMCameraControl_f =
    ::std::option::Option<
        unsafe extern "C" fn(outCameraPosition: *mut XPLMCameraPosition_t,
                             inIsLosingControl: ::std::os::raw::c_int,
                             inRefcon: *mut ::std::os::raw::c_void)
                             -> ::std::os::raw::c_int,
    >;
extern "C" {
    pub fn XPLMControlCamera(
        inHowLong: XPLMCameraControlDuration,
        inControlFunc: XPLMCameraControl_f,
        inRefcon: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn XPLMDontControlCamera();
}
extern "C" {
    pub fn XPLMIsCameraBeingControlled(
        outCameraControlDuration: *mut XPLMCameraControlDuration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMReadCameraPosition(outCameraPosition: *mut XPLMCameraPosition_t);
}
pub type XPLMDataRef = *mut ::std::os::raw::c_void;
pub const xplmType_Unknown: _bindgen_ty_28 = 0;
pub const xplmType_Int: _bindgen_ty_28 = 1;
pub const xplmType_Float: _bindgen_ty_28 = 2;
pub const xplmType_Double: _bindgen_ty_28 = 4;
pub const xplmType_FloatArray: _bindgen_ty_28 = 8;
pub const xplmType_IntArray: _bindgen_ty_28 = 16;
pub const xplmType_Data: _bindgen_ty_28 = 32;
pub type _bindgen_ty_28 = u32;
pub type XPLMDataTypeID = ::std::os::raw::c_int;
extern "C" {
    pub fn XPLMFindDataRef(inDataRefName: *const ::std::os::raw::c_char) -> XPLMDataRef;
}
extern "C" {
    pub fn XPLMCanWriteDataRef(inDataRef: XPLMDataRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMIsDataRefGood(inDataRef: XPLMDataRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMGetDataRefTypes(inDataRef: XPLMDataRef) -> XPLMDataTypeID;
}
extern "C" {
    pub fn XPLMGetDatai(inDataRef: XPLMDataRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMSetDatai(inDataRef: XPLMDataRef, inValue: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XPLMGetDataf(inDataRef: XPLMDataRef) -> f32;
}
extern "C" {
    pub fn XPLMSetDataf(inDataRef: XPLMDataRef, inValue: f32);
}
extern "C" {
    pub fn XPLMGetDatad(inDataRef: XPLMDataRef) -> f64;
}
extern "C" {
    pub fn XPLMSetDatad(inDataRef: XPLMDataRef, inValue: f64);
}
extern "C" {
    pub fn XPLMGetDatavi(
        inDataRef: XPLMDataRef,
        outValues: *mut ::std::os::raw::c_int,
        inOffset: ::std::os::raw::c_int,
        inMax: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMSetDatavi(
        inDataRef: XPLMDataRef,
        inValues: *mut ::std::os::raw::c_int,
        inoffset: ::std::os::raw::c_int,
        inCount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMGetDatavf(
        inDataRef: XPLMDataRef,
        outValues: *mut f32,
        inOffset: ::std::os::raw::c_int,
        inMax: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMSetDatavf(
        inDataRef: XPLMDataRef,
        inValues: *mut f32,
        inoffset: ::std::os::raw::c_int,
        inCount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMGetDatab(
        inDataRef: XPLMDataRef,
        outValue: *mut ::std::os::raw::c_void,
        inOffset: ::std::os::raw::c_int,
        inMaxBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMSetDatab(
        inDataRef: XPLMDataRef,
        inValue: *mut ::std::os::raw::c_void,
        inOffset: ::std::os::raw::c_int,
        inLength: ::std::os::raw::c_int,
    );
}
pub type XPLMGetDatai_f =
    ::std::option::Option<
        unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void)
                             -> ::std::os::raw::c_int,
    >;
pub type XPLMSetDatai_f =
    ::std::option::Option<
        unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void,
                             inValue: ::std::os::raw::c_int),
    >;
pub type XPLMGetDataf_f =
    ::std::option::Option<unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void) -> f32>;
pub type XPLMSetDataf_f =
    ::std::option::Option<
        unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void,
                             inValue: f32),
    >;
pub type XPLMGetDatad_f =
    ::std::option::Option<unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void) -> f64>;
pub type XPLMSetDatad_f =
    ::std::option::Option<
        unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void,
                             inValue: f64),
    >;
pub type XPLMGetDatavi_f =
    ::std::option::Option<
        unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void,
                             outValues: *mut ::std::os::raw::c_int,
                             inOffset: ::std::os::raw::c_int,
                             inMax: ::std::os::raw::c_int)
                             -> ::std::os::raw::c_int,
    >;
pub type XPLMSetDatavi_f =
    ::std::option::Option<
        unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void,
                             inValues: *mut ::std::os::raw::c_int,
                             inOffset: ::std::os::raw::c_int,
                             inCount: ::std::os::raw::c_int),
    >;
pub type XPLMGetDatavf_f =
    ::std::option::Option<
        unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void,
                             outValues: *mut f32,
                             inOffset: ::std::os::raw::c_int,
                             inMax: ::std::os::raw::c_int)
                             -> ::std::os::raw::c_int,
    >;
pub type XPLMSetDatavf_f =
    ::std::option::Option<
        unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void,
                             inValues: *mut f32,
                             inOffset: ::std::os::raw::c_int,
                             inCount: ::std::os::raw::c_int),
    >;
pub type XPLMGetDatab_f =
    ::std::option::Option<
        unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void,
                             outValue: *mut ::std::os::raw::c_void,
                             inOffset: ::std::os::raw::c_int,
                             inMaxLength: ::std::os::raw::c_int)
                             -> ::std::os::raw::c_int,
    >;
pub type XPLMSetDatab_f =
    ::std::option::Option<
        unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void,
                             inValue: *mut ::std::os::raw::c_void,
                             inOffset: ::std::os::raw::c_int,
                             inLength: ::std::os::raw::c_int),
    >;
extern "C" {
    pub fn XPLMRegisterDataAccessor(
        inDataName: *const ::std::os::raw::c_char,
        inDataType: XPLMDataTypeID,
        inIsWritable: ::std::os::raw::c_int,
        inReadInt: XPLMGetDatai_f,
        inWriteInt: XPLMSetDatai_f,
        inReadFloat: XPLMGetDataf_f,
        inWriteFloat: XPLMSetDataf_f,
        inReadDouble: XPLMGetDatad_f,
        inWriteDouble: XPLMSetDatad_f,
        inReadIntArray: XPLMGetDatavi_f,
        inWriteIntArray: XPLMSetDatavi_f,
        inReadFloatArray: XPLMGetDatavf_f,
        inWriteFloatArray: XPLMSetDatavf_f,
        inReadData: XPLMGetDatab_f,
        inWriteData: XPLMSetDatab_f,
        inReadRefcon: *mut ::std::os::raw::c_void,
        inWriteRefcon: *mut ::std::os::raw::c_void,
    ) -> XPLMDataRef;
}
extern "C" {
    pub fn XPLMUnregisterDataAccessor(inDataRef: XPLMDataRef);
}
pub type XPLMDataChanged_f =
    ::std::option::Option<unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn XPLMShareData(
        inDataName: *const ::std::os::raw::c_char,
        inDataType: XPLMDataTypeID,
        inNotificationFunc: XPLMDataChanged_f,
        inNotificationRefcon: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMUnshareData(
        inDataName: *const ::std::os::raw::c_char,
        inDataType: XPLMDataTypeID,
        inNotificationFunc: XPLMDataChanged_f,
        inNotificationRefcon: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const xplm_Phase_FirstScene: _bindgen_ty_29 = 0;
pub const xplm_Phase_Terrain: _bindgen_ty_29 = 5;
pub const xplm_Phase_Airports: _bindgen_ty_29 = 10;
pub const xplm_Phase_Vectors: _bindgen_ty_29 = 15;
pub const xplm_Phase_Objects: _bindgen_ty_29 = 20;
pub const xplm_Phase_Airplanes: _bindgen_ty_29 = 25;
pub const xplm_Phase_LastScene: _bindgen_ty_29 = 30;
pub const xplm_Phase_FirstCockpit: _bindgen_ty_29 = 35;
pub const xplm_Phase_Panel: _bindgen_ty_29 = 40;
pub const xplm_Phase_Gauges: _bindgen_ty_29 = 45;
pub const xplm_Phase_Window: _bindgen_ty_29 = 50;
pub const xplm_Phase_LastCockpit: _bindgen_ty_29 = 55;
pub const xplm_Phase_LocalMap3D: _bindgen_ty_29 = 100;
pub const xplm_Phase_LocalMap2D: _bindgen_ty_29 = 101;
pub const xplm_Phase_LocalMapProfile: _bindgen_ty_29 = 102;
pub type _bindgen_ty_29 = u32;
pub type XPLMDrawingPhase = ::std::os::raw::c_int;
pub type XPLMDrawCallback_f =
    ::std::option::Option<
        unsafe extern "C" fn(inPhase: XPLMDrawingPhase,
                             inIsBefore: ::std::os::raw::c_int,
                             inRefcon: *mut ::std::os::raw::c_void)
                             -> ::std::os::raw::c_int,
    >;
pub type XPLMKeySniffer_f =
    ::std::option::Option<
        unsafe extern "C" fn(inChar: ::std::os::raw::c_char,
                             inFlags: XPLMKeyFlags,
                             inVirtualKey: ::std::os::raw::c_char,
                             inRefcon: *mut ::std::os::raw::c_void)
                             -> ::std::os::raw::c_int,
    >;
extern "C" {
    pub fn XPLMRegisterDrawCallback(
        inCallback: XPLMDrawCallback_f,
        inPhase: XPLMDrawingPhase,
        inWantsBefore: ::std::os::raw::c_int,
        inRefcon: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMUnregisterDrawCallback(
        inCallback: XPLMDrawCallback_f,
        inPhase: XPLMDrawingPhase,
        inWantsBefore: ::std::os::raw::c_int,
        inRefcon: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMRegisterKeySniffer(
        inCallback: XPLMKeySniffer_f,
        inBeforeWindows: ::std::os::raw::c_int,
        inRefcon: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMUnregisterKeySniffer(
        inCallback: XPLMKeySniffer_f,
        inBeforeWindows: ::std::os::raw::c_int,
        inRefcon: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const xplm_MouseDown: _bindgen_ty_30 = 1;
pub const xplm_MouseDrag: _bindgen_ty_30 = 2;
pub const xplm_MouseUp: _bindgen_ty_30 = 3;
pub type _bindgen_ty_30 = u32;
pub type XPLMMouseStatus = ::std::os::raw::c_int;
pub const xplm_CursorDefault: _bindgen_ty_31 = 0;
pub const xplm_CursorHidden: _bindgen_ty_31 = 1;
pub const xplm_CursorArrow: _bindgen_ty_31 = 2;
pub const xplm_CursorCustom: _bindgen_ty_31 = 3;
pub type _bindgen_ty_31 = u32;
pub type XPLMCursorStatus = ::std::os::raw::c_int;
pub type XPLMWindowID = *mut ::std::os::raw::c_void;
pub type XPLMDrawWindow_f =
    ::std::option::Option<
        unsafe extern "C" fn(inWindowID: XPLMWindowID,
                             inRefcon: *mut ::std::os::raw::c_void),
    >;
pub type XPLMReceiveMonitorBoundsGlobal_f =
    ::std::option::Option<
        unsafe extern "C" fn(inMonitorIndex: ::std::os::raw::c_int,
                             inLeftBx: ::std::os::raw::c_int,
                             inTopBx: ::std::os::raw::c_int,
                             inRightBx: ::std::os::raw::c_int,
                             inBottomBx: ::std::os::raw::c_int,
                             refcon: *mut ::std::os::raw::c_void),
    >;
pub type XPLMReceiveMonitorBoundsOS_f =
    ::std::option::Option<
        unsafe extern "C" fn(inMonitorIndex: ::std::os::raw::c_int,
                             inLeftPx: ::std::os::raw::c_int,
                             inTopPx: ::std::os::raw::c_int,
                             inRightPx: ::std::os::raw::c_int,
                             inBottomPx: ::std::os::raw::c_int,
                             refcon: *mut ::std::os::raw::c_void),
    >;
pub type XPLMHandleKey_f =
    ::std::option::Option<
        unsafe extern "C" fn(inWindowID: XPLMWindowID,
                             inKey: ::std::os::raw::c_char,
                             inFlags: XPLMKeyFlags,
                             inVirtualKey: ::std::os::raw::c_char,
                             inRefcon: *mut ::std::os::raw::c_void,
                             losingFocus: ::std::os::raw::c_int),
    >;
pub type XPLMHandleMouseClick_f =
    ::std::option::Option<
        unsafe extern "C" fn(inWindowID: XPLMWindowID,
                             x: ::std::os::raw::c_int,
                             y: ::std::os::raw::c_int,
                             inMouse: XPLMMouseStatus,
                             inRefcon: *mut ::std::os::raw::c_void)
                             -> ::std::os::raw::c_int,
    >;
pub type XPLMHandleCursor_f =
    ::std::option::Option<
        unsafe extern "C" fn(inWindowID: XPLMWindowID,
                             x: ::std::os::raw::c_int,
                             y: ::std::os::raw::c_int,
                             inRefcon: *mut ::std::os::raw::c_void)
                             -> XPLMCursorStatus,
    >;
pub type XPLMHandleMouseWheel_f =
    ::std::option::Option<
        unsafe extern "C" fn(inWindowID: XPLMWindowID,
                             x: ::std::os::raw::c_int,
                             y: ::std::os::raw::c_int,
                             wheel: ::std::os::raw::c_int,
                             clicks: ::std::os::raw::c_int,
                             inRefcon: *mut ::std::os::raw::c_void)
                             -> ::std::os::raw::c_int,
    >;
pub const xplm_WindowLayerFlightOverlay: _bindgen_ty_32 = 0;
pub const xplm_WindowLayerFloatingWindows: _bindgen_ty_32 = 1;
pub const xplm_WindowLayerModal: _bindgen_ty_32 = 2;
pub const xplm_WindowLayerGrowlNotifications: _bindgen_ty_32 = 3;
pub type _bindgen_ty_32 = u32;
pub type XPLMWindowLayer = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPLMCreateWindow_t {
    pub structSize: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub visible: ::std::os::raw::c_int,
    pub drawWindowFunc: XPLMDrawWindow_f,
    pub handleMouseClickFunc: XPLMHandleMouseClick_f,
    pub handleKeyFunc: XPLMHandleKey_f,
    pub handleCursorFunc: XPLMHandleCursor_f,
    pub handleMouseWheelFunc: XPLMHandleMouseWheel_f,
    pub refcon: *mut ::std::os::raw::c_void,
    pub decorateAsFloatingWindow: ::std::os::raw::c_int,
    pub layer: XPLMWindowLayer,
    pub handleRightClickFunc: XPLMHandleMouseClick_f,
}
extern "C" {
    pub fn XPLMCreateWindowEx(inParams: *mut XPLMCreateWindow_t) -> XPLMWindowID;
}
extern "C" {
    pub fn XPLMCreateWindow(
        inLeft: ::std::os::raw::c_int,
        inTop: ::std::os::raw::c_int,
        inRight: ::std::os::raw::c_int,
        inBottom: ::std::os::raw::c_int,
        inIsVisible: ::std::os::raw::c_int,
        inDrawCallback: XPLMDrawWindow_f,
        inKeyCallback: XPLMHandleKey_f,
        inMouseCallback: XPLMHandleMouseClick_f,
        inRefcon: *mut ::std::os::raw::c_void,
    ) -> XPLMWindowID;
}
extern "C" {
    pub fn XPLMDestroyWindow(inWindowID: XPLMWindowID);
}
extern "C" {
    pub fn XPLMGetScreenSize(
        outWidth: *mut ::std::os::raw::c_int,
        outHeight: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMGetScreenBoundsGlobal(
        outLeft: *mut ::std::os::raw::c_int,
        outTop: *mut ::std::os::raw::c_int,
        outRight: *mut ::std::os::raw::c_int,
        outBottom: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMGetAllMonitorBoundsGlobal(
        inMonitorBoundsCallback: XPLMReceiveMonitorBoundsGlobal_f,
        refcon: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn XPLMGetAllMonitorBoundsOS(
        inMonitorBoundsCallback: XPLMReceiveMonitorBoundsOS_f,
        refcon: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn XPLMGetMouseLocation(outX: *mut ::std::os::raw::c_int, outY: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn XPLMGetMouseLocationGlobal(
        outX: *mut ::std::os::raw::c_int,
        outY: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMGetWindowGeometry(
        inWindowID: XPLMWindowID,
        outLeft: *mut ::std::os::raw::c_int,
        outTop: *mut ::std::os::raw::c_int,
        outRight: *mut ::std::os::raw::c_int,
        outBottom: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMSetWindowGeometry(
        inWindowID: XPLMWindowID,
        inLeft: ::std::os::raw::c_int,
        inTop: ::std::os::raw::c_int,
        inRight: ::std::os::raw::c_int,
        inBottom: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMGetWindowGeometryOS(
        inWindowID: XPLMWindowID,
        outLeft: *mut ::std::os::raw::c_int,
        outTop: *mut ::std::os::raw::c_int,
        outRight: *mut ::std::os::raw::c_int,
        outBottom: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMSetWindowGeometryOS(
        inWindowID: XPLMWindowID,
        inLeft: ::std::os::raw::c_int,
        inTop: ::std::os::raw::c_int,
        inRight: ::std::os::raw::c_int,
        inBottom: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMGetWindowIsVisible(inWindowID: XPLMWindowID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMSetWindowIsVisible(inWindowID: XPLMWindowID, inIsVisible: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XPLMWindowIsPoppedOut(inWindowID: XPLMWindowID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMSetWindowGravity(
        inWindowID: XPLMWindowID,
        inLeftGravity: f32,
        inTopGravity: f32,
        inRightGravity: f32,
        inBottomGravity: f32,
    );
}
extern "C" {
    pub fn XPLMSetWindowResizingLimits(
        inWindowID: XPLMWindowID,
        inMinWidthBoxels: ::std::os::raw::c_int,
        inMinHeightBoxels: ::std::os::raw::c_int,
        inMaxWidthBoxels: ::std::os::raw::c_int,
        inMaxHeightBoxels: ::std::os::raw::c_int,
    );
}
pub const xplm_WindowPositionFree: _bindgen_ty_33 = 0;
pub const xplm_WindowCenterOnMonitor: _bindgen_ty_33 = 1;
pub const xplm_WindowFullScreenOnMonitor: _bindgen_ty_33 = 2;
pub const xplm_WindowFullScreenOnAllMonitors: _bindgen_ty_33 = 3;
pub const xplm_WindowPopOut: _bindgen_ty_33 = 4;
pub type _bindgen_ty_33 = u32;
pub type XPLMWindowPositioningMode = ::std::os::raw::c_int;
extern "C" {
    pub fn XPLMSetWindowPositioningMode(
        inWindowID: XPLMWindowID,
        inPositioningMode: XPLMWindowPositioningMode,
        inMonitorIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMSetWindowTitle(
        inWindowID: XPLMWindowID,
        inWindowTitle: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn XPLMGetWindowRefCon(inWindowID: XPLMWindowID) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn XPLMSetWindowRefCon(inWindowID: XPLMWindowID, inRefcon: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn XPLMTakeKeyboardFocus(inWindow: XPLMWindowID);
}
extern "C" {
    pub fn XPLMBringWindowToFront(inWindow: XPLMWindowID);
}
extern "C" {
    pub fn XPLMIsWindowInFront(inWindow: XPLMWindowID) -> ::std::os::raw::c_int;
}
/// HOT KEYS
pub type XPLMHotKey_f =
    ::std::option::Option<unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void)>;
pub type XPLMHotKeyID = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn XPLMRegisterHotKey(
        inVirtualKey: ::std::os::raw::c_char,
        inFlags: XPLMKeyFlags,
        inDescription: *const ::std::os::raw::c_char,
        inCallback: XPLMHotKey_f,
        inRefcon: *mut ::std::os::raw::c_void,
    ) -> XPLMHotKeyID;
}
extern "C" {
    pub fn XPLMUnregisterHotKey(inHotKey: XPLMHotKeyID);
}
extern "C" {
    pub fn XPLMCountHotKeys() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMGetNthHotKey(inIndex: ::std::os::raw::c_int) -> XPLMHotKeyID;
}
extern "C" {
    pub fn XPLMGetHotKeyInfo(
        inHotKey: XPLMHotKeyID,
        outVirtualKey: *mut ::std::os::raw::c_char,
        outFlags: *mut XPLMKeyFlags,
        outDescription: *mut ::std::os::raw::c_char,
        outPlugin: *mut XPLMPluginID,
    );
}
extern "C" {
    pub fn XPLMSetHotKeyCombination(
        inHotKey: XPLMHotKeyID,
        inVirtualKey: ::std::os::raw::c_char,
        inFlags: XPLMKeyFlags,
    );
}
pub const xplm_Tex_GeneralInterface: _bindgen_ty_34 = 0;
pub const xplm_Tex_AircraftPaint: _bindgen_ty_34 = 1;
pub const xplm_Tex_AircraftLiteMap: _bindgen_ty_34 = 2;
pub type _bindgen_ty_34 = u32;
pub type XPLMTextureID = ::std::os::raw::c_int;
extern "C" {
    pub fn XPLMSetGraphicsState(
        inEnableFog: ::std::os::raw::c_int,
        inNumberTexUnits: ::std::os::raw::c_int,
        inEnableLighting: ::std::os::raw::c_int,
        inEnableAlphaTesting: ::std::os::raw::c_int,
        inEnableAlphaBlending: ::std::os::raw::c_int,
        inEnableDepthTesting: ::std::os::raw::c_int,
        inEnableDepthWriting: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMBindTexture2d(
        inTextureNum: ::std::os::raw::c_int,
        inTextureUnit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMGenerateTextureNumbers(
        outTextureIDs: *mut ::std::os::raw::c_int,
        inCount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMGetTexture(inTexture: XPLMTextureID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMWorldToLocal(
        inLatitude: f64,
        inLongitude: f64,
        inAltitude: f64,
        outX: *mut f64,
        outY: *mut f64,
        outZ: *mut f64,
    );
}
extern "C" {
    pub fn XPLMLocalToWorld(
        inX: f64,
        inY: f64,
        inZ: f64,
        outLatitude: *mut f64,
        outLongitude: *mut f64,
        outAltitude: *mut f64,
    );
}
extern "C" {
    pub fn XPLMDrawTranslucentDarkBox(
        inLeft: ::std::os::raw::c_int,
        inTop: ::std::os::raw::c_int,
        inRight: ::std::os::raw::c_int,
        inBottom: ::std::os::raw::c_int,
    );
}
pub const xplmFont_Basic: _bindgen_ty_35 = 0;
pub const xplmFont_Menus: _bindgen_ty_35 = 1;
pub const xplmFont_Metal: _bindgen_ty_35 = 2;
pub const xplmFont_Led: _bindgen_ty_35 = 3;
pub const xplmFont_LedWide: _bindgen_ty_35 = 4;
pub const xplmFont_PanelHUD: _bindgen_ty_35 = 5;
pub const xplmFont_PanelEFIS: _bindgen_ty_35 = 6;
pub const xplmFont_PanelGPS: _bindgen_ty_35 = 7;
pub const xplmFont_RadiosGA: _bindgen_ty_35 = 8;
pub const xplmFont_RadiosBC: _bindgen_ty_35 = 9;
pub const xplmFont_RadiosHM: _bindgen_ty_35 = 10;
pub const xplmFont_RadiosGANarrow: _bindgen_ty_35 = 11;
pub const xplmFont_RadiosBCNarrow: _bindgen_ty_35 = 12;
pub const xplmFont_RadiosHMNarrow: _bindgen_ty_35 = 13;
pub const xplmFont_Timer: _bindgen_ty_35 = 14;
pub const xplmFont_FullRound: _bindgen_ty_35 = 15;
pub const xplmFont_SmallRound: _bindgen_ty_35 = 16;
pub const xplmFont_Menus_Localized: _bindgen_ty_35 = 17;
pub const xplmFont_Proportional: _bindgen_ty_35 = 18;
pub type _bindgen_ty_35 = u32;
pub type XPLMFontID = ::std::os::raw::c_int;
extern "C" {
    pub fn XPLMDrawString(
        inColorRGB: *mut f32,
        inXOffset: ::std::os::raw::c_int,
        inYOffset: ::std::os::raw::c_int,
        inChar: *mut ::std::os::raw::c_char,
        inWordWrapWidth: *mut ::std::os::raw::c_int,
        inFontID: XPLMFontID,
    );
}
extern "C" {
    pub fn XPLMDrawNumber(
        inColorRGB: *mut f32,
        inXOffset: ::std::os::raw::c_int,
        inYOffset: ::std::os::raw::c_int,
        inValue: f64,
        inDigits: ::std::os::raw::c_int,
        inDecimals: ::std::os::raw::c_int,
        inShowSign: ::std::os::raw::c_int,
        inFontID: XPLMFontID,
    );
}
extern "C" {
    pub fn XPLMGetFontDimensions(
        inFontID: XPLMFontID,
        outCharWidth: *mut ::std::os::raw::c_int,
        outCharHeight: *mut ::std::os::raw::c_int,
        outDigitsOnly: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMMeasureString(
        inFontID: XPLMFontID,
        inChar: *const ::std::os::raw::c_char,
        inNumChars: ::std::os::raw::c_int,
    ) -> f32;
}
pub const xplm_ProbeY: _bindgen_ty_36 = 0;
pub type _bindgen_ty_36 = u32;
pub type XPLMProbeType = ::std::os::raw::c_int;
pub const xplm_ProbeHitTerrain: _bindgen_ty_37 = 0;
pub const xplm_ProbeError: _bindgen_ty_37 = 1;
pub const xplm_ProbeMissed: _bindgen_ty_37 = 2;
pub type _bindgen_ty_37 = u32;
pub type XPLMProbeResult = ::std::os::raw::c_int;
pub type XPLMProbeRef = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPLMProbeInfo_t {
    pub structSize: ::std::os::raw::c_int,
    pub locationX: f32,
    pub locationY: f32,
    pub locationZ: f32,
    pub normalX: f32,
    pub normalY: f32,
    pub normalZ: f32,
    pub velocityX: f32,
    pub velocityY: f32,
    pub velocityZ: f32,
    pub is_wet: ::std::os::raw::c_int,
}
extern "C" {
    pub fn XPLMCreateProbe(inProbeType: XPLMProbeType) -> XPLMProbeRef;
}
extern "C" {
    pub fn XPLMDestroyProbe(inProbe: XPLMProbeRef);
}
extern "C" {
    pub fn XPLMProbeTerrainXYZ(
        inProbe: XPLMProbeRef,
        inX: f32,
        inY: f32,
        inZ: f32,
        outInfo: *mut XPLMProbeInfo_t,
    ) -> XPLMProbeResult;
}
extern "C" {
    /// Magnetic Variation
    pub fn XPLMGetMagneticVariation(latitude: f64, longitude: f64) -> f32;
}
extern "C" {
    pub fn XPLMDegTrueToDegMagnetic(headingDegreesTrue: f32) -> f32;
}
extern "C" {
    pub fn XPLMDegMagneticToDegTrue(headingDegreesMagnetic: f32) -> f32;
}
pub type XPLMObjectRef = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPLMDrawInfo_t {
    pub structSize: ::std::os::raw::c_int,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub pitch: f32,
    pub heading: f32,
    pub roll: f32,
}
pub type XPLMObjectLoaded_f =
    ::std::option::Option<
        unsafe extern "C" fn(inObject: XPLMObjectRef,
                             inRefcon: *mut ::std::os::raw::c_void),
    >;
extern "C" {
    pub fn XPLMLoadObject(inPath: *const ::std::os::raw::c_char) -> XPLMObjectRef;
}
extern "C" {
    pub fn XPLMLoadObjectAsync(
        inPath: *const ::std::os::raw::c_char,
        inCallback: XPLMObjectLoaded_f,
        inRefcon: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn XPLMDrawObjects(
        inObject: XPLMObjectRef,
        inCount: ::std::os::raw::c_int,
        inLocations: *mut XPLMDrawInfo_t,
        lighting: ::std::os::raw::c_int,
        earth_relative: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMUnloadObject(inObject: XPLMObjectRef);
}
/// Library Access
pub type XPLMLibraryEnumerator_f =
    ::std::option::Option<
        unsafe extern "C" fn(inFilePath: *const ::std::os::raw::c_char,
                             inRef: *mut ::std::os::raw::c_void),
    >;
extern "C" {
    pub fn XPLMLookupObjects(
        inPath: *const ::std::os::raw::c_char,
        inLatitude: f32,
        inLongitude: f32,
        enumerator: XPLMLibraryEnumerator_f,
        ref_: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
/// Instance Creation and Destruction
pub type XPLMInstanceRef = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn XPLMCreateInstance(
        obj: XPLMObjectRef,
        datarefs: *mut *const ::std::os::raw::c_char,
    ) -> XPLMInstanceRef;
}
extern "C" {
    pub fn XPLMDestroyInstance(instance: XPLMInstanceRef);
}
extern "C" {
    /// Instance Manipulation
    pub fn XPLMInstanceSetPosition(
        instance: XPLMInstanceRef,
        new_position: *const XPLMDrawInfo_t,
        data: *const f32,
    );
}
/// DRAWING CALLBACKS
pub type XPLMMapLayerID = *mut ::std::os::raw::c_void;
pub type XPLMMapProjectionID = *mut ::std::os::raw::c_void;
pub const xplm_MapStyle_VFR_Sectional: _bindgen_ty_38 = 0;
pub const xplm_MapStyle_IFR_LowEnroute: _bindgen_ty_38 = 1;
pub const xplm_MapStyle_IFR_HighEnroute: _bindgen_ty_38 = 2;
pub type _bindgen_ty_38 = u32;
pub type XPLMMapStyle = ::std::os::raw::c_int;
pub type XPLMMapDrawingCallback_f =
    ::std::option::Option<
        unsafe extern "C" fn(inLayer: XPLMMapLayerID,
                             inMapBoundsLeftTopRightBottom: *const f32,
                             zoomRatio: f32,
                             mapUnitsPerUserInterfaceUnit: f32,
                             mapStyle: XPLMMapStyle,
                             projection: XPLMMapProjectionID,
                             inRefcon: *mut ::std::os::raw::c_void),
    >;
pub type XPLMMapIconDrawingCallback_f =
    ::std::option::Option<
        unsafe extern "C" fn(inLayer: XPLMMapLayerID,
                             inMapBoundsLeftTopRightBottom: *const f32,
                             zoomRatio: f32,
                             mapUnitsPerUserInterfaceUnit: f32,
                             mapStyle: XPLMMapStyle,
                             projection: XPLMMapProjectionID,
                             refcon: *mut ::std::os::raw::c_void),
    >;
pub type XPLMMapLabelDrawingCallback_f =
    ::std::option::Option<
        unsafe extern "C" fn(inLayer: XPLMMapLayerID,
                             inMapBoundsLeftTopRightBottom: *const f32,
                             zoomRatio: f32,
                             mapUnitsPerUserInterfaceUnit: f32,
                             mapStyle: XPLMMapStyle,
                             projection: XPLMMapProjectionID,
                             refcon: *mut ::std::os::raw::c_void),
    >;
/// LAYER MANAGEMENT CALLBACKS
pub type XPLMMapPrepareCacheCallback_f =
    ::std::option::Option<
        unsafe extern "C" fn(inLayer: XPLMMapLayerID,
                             inTotalMapBoundsLeftTopRightBottom: *const f32,
                             projection: XPLMMapProjectionID,
                             inRefcon: *mut ::std::os::raw::c_void),
    >;
pub type XPLMMapWillBeDeletedCallback_f =
    ::std::option::Option<
        unsafe extern "C" fn(inLayer: XPLMMapLayerID,
                             inRefcon: *mut ::std::os::raw::c_void),
    >;
pub const xplm_MapLayer_Fill: _bindgen_ty_39 = 0;
pub const xplm_MapLayer_Markings: _bindgen_ty_39 = 1;
pub type _bindgen_ty_39 = u32;
pub type XPLMMapLayerType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPLMCreateMapLayer_t {
    pub structSize: ::std::os::raw::c_int,
    pub mapToCreateLayerIn: *const ::std::os::raw::c_char,
    pub layerType: XPLMMapLayerType,
    pub willBeDeletedCallback: XPLMMapWillBeDeletedCallback_f,
    pub prepCacheCallback: XPLMMapPrepareCacheCallback_f,
    pub drawCallback: XPLMMapDrawingCallback_f,
    pub iconCallback: XPLMMapIconDrawingCallback_f,
    pub labelCallback: XPLMMapLabelDrawingCallback_f,
    pub showUiToggle: ::std::os::raw::c_int,
    pub layerName: *const ::std::os::raw::c_char,
    pub refcon: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn XPLMCreateMapLayer(inParams: *mut XPLMCreateMapLayer_t) -> XPLMMapLayerID;
}
extern "C" {
    pub fn XPLMDestroyMapLayer(inLayer: XPLMMapLayerID) -> ::std::os::raw::c_int;
}
pub type XPLMMapCreatedCallback_f =
    ::std::option::Option<
        unsafe extern "C" fn(mapIdentifier: *const ::std::os::raw::c_char,
                             refcon: *mut ::std::os::raw::c_void),
    >;
extern "C" {
    pub fn XPLMRegisterMapCreationHook(
        callback: XPLMMapCreatedCallback_f,
        refcon: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn XPLMMapExists(mapIdentifier: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub const xplm_MapOrientation_Map: _bindgen_ty_40 = 0;
pub const xplm_MapOrientation_UI: _bindgen_ty_40 = 1;
pub type _bindgen_ty_40 = u32;
pub type XPLMMapOrientation = ::std::os::raw::c_int;
extern "C" {
    pub fn XPLMDrawMapIconFromSheet(
        layer: XPLMMapLayerID,
        inPngPath: *const ::std::os::raw::c_char,
        s: ::std::os::raw::c_int,
        t: ::std::os::raw::c_int,
        ds: ::std::os::raw::c_int,
        dt: ::std::os::raw::c_int,
        mapX: f32,
        mapY: f32,
        orientation: XPLMMapOrientation,
        rotationDegrees: f32,
        mapWidth: f32,
    );
}
extern "C" {
    pub fn XPLMDrawMapLabel(
        layer: XPLMMapLayerID,
        inText: *const ::std::os::raw::c_char,
        mapX: f32,
        mapY: f32,
        orientation: XPLMMapOrientation,
        rotationDegrees: f32,
    );
}
extern "C" {
    /// MAP PROJECTIONS
    pub fn XPLMMapProject(
        projection: XPLMMapProjectionID,
        latitude: f64,
        longitude: f64,
        outX: *mut f32,
        outY: *mut f32,
    );
}
extern "C" {
    pub fn XPLMMapUnproject(
        projection: XPLMMapProjectionID,
        mapX: f32,
        mapY: f32,
        outLatitude: *mut f64,
        outLongitude: *mut f64,
    );
}
extern "C" {
    pub fn XPLMMapScaleMeter(projection: XPLMMapProjectionID, mapX: f32, mapY: f32) -> f32;
}
extern "C" {
    pub fn XPLMMapGetNorthHeading(projection: XPLMMapProjectionID, mapX: f32, mapY: f32) -> f32;
}
pub const xplm_key_pause: _bindgen_ty_41 = 0;
pub const xplm_key_revthrust: _bindgen_ty_41 = 1;
pub const xplm_key_jettison: _bindgen_ty_41 = 2;
pub const xplm_key_brakesreg: _bindgen_ty_41 = 3;
pub const xplm_key_brakesmax: _bindgen_ty_41 = 4;
pub const xplm_key_gear: _bindgen_ty_41 = 5;
pub const xplm_key_timedn: _bindgen_ty_41 = 6;
pub const xplm_key_timeup: _bindgen_ty_41 = 7;
pub const xplm_key_fadec: _bindgen_ty_41 = 8;
pub const xplm_key_otto_dis: _bindgen_ty_41 = 9;
pub const xplm_key_otto_atr: _bindgen_ty_41 = 10;
pub const xplm_key_otto_asi: _bindgen_ty_41 = 11;
pub const xplm_key_otto_hdg: _bindgen_ty_41 = 12;
pub const xplm_key_otto_gps: _bindgen_ty_41 = 13;
pub const xplm_key_otto_lev: _bindgen_ty_41 = 14;
pub const xplm_key_otto_hnav: _bindgen_ty_41 = 15;
pub const xplm_key_otto_alt: _bindgen_ty_41 = 16;
pub const xplm_key_otto_vvi: _bindgen_ty_41 = 17;
pub const xplm_key_otto_vnav: _bindgen_ty_41 = 18;
pub const xplm_key_otto_nav1: _bindgen_ty_41 = 19;
pub const xplm_key_otto_nav2: _bindgen_ty_41 = 20;
pub const xplm_key_targ_dn: _bindgen_ty_41 = 21;
pub const xplm_key_targ_up: _bindgen_ty_41 = 22;
pub const xplm_key_hdgdn: _bindgen_ty_41 = 23;
pub const xplm_key_hdgup: _bindgen_ty_41 = 24;
pub const xplm_key_barodn: _bindgen_ty_41 = 25;
pub const xplm_key_baroup: _bindgen_ty_41 = 26;
pub const xplm_key_obs1dn: _bindgen_ty_41 = 27;
pub const xplm_key_obs1up: _bindgen_ty_41 = 28;
pub const xplm_key_obs2dn: _bindgen_ty_41 = 29;
pub const xplm_key_obs2up: _bindgen_ty_41 = 30;
pub const xplm_key_com1_1: _bindgen_ty_41 = 31;
pub const xplm_key_com1_2: _bindgen_ty_41 = 32;
pub const xplm_key_com1_3: _bindgen_ty_41 = 33;
pub const xplm_key_com1_4: _bindgen_ty_41 = 34;
pub const xplm_key_nav1_1: _bindgen_ty_41 = 35;
pub const xplm_key_nav1_2: _bindgen_ty_41 = 36;
pub const xplm_key_nav1_3: _bindgen_ty_41 = 37;
pub const xplm_key_nav1_4: _bindgen_ty_41 = 38;
pub const xplm_key_com2_1: _bindgen_ty_41 = 39;
pub const xplm_key_com2_2: _bindgen_ty_41 = 40;
pub const xplm_key_com2_3: _bindgen_ty_41 = 41;
pub const xplm_key_com2_4: _bindgen_ty_41 = 42;
pub const xplm_key_nav2_1: _bindgen_ty_41 = 43;
pub const xplm_key_nav2_2: _bindgen_ty_41 = 44;
pub const xplm_key_nav2_3: _bindgen_ty_41 = 45;
pub const xplm_key_nav2_4: _bindgen_ty_41 = 46;
pub const xplm_key_adf_1: _bindgen_ty_41 = 47;
pub const xplm_key_adf_2: _bindgen_ty_41 = 48;
pub const xplm_key_adf_3: _bindgen_ty_41 = 49;
pub const xplm_key_adf_4: _bindgen_ty_41 = 50;
pub const xplm_key_adf_5: _bindgen_ty_41 = 51;
pub const xplm_key_adf_6: _bindgen_ty_41 = 52;
pub const xplm_key_transpon_1: _bindgen_ty_41 = 53;
pub const xplm_key_transpon_2: _bindgen_ty_41 = 54;
pub const xplm_key_transpon_3: _bindgen_ty_41 = 55;
pub const xplm_key_transpon_4: _bindgen_ty_41 = 56;
pub const xplm_key_transpon_5: _bindgen_ty_41 = 57;
pub const xplm_key_transpon_6: _bindgen_ty_41 = 58;
pub const xplm_key_transpon_7: _bindgen_ty_41 = 59;
pub const xplm_key_transpon_8: _bindgen_ty_41 = 60;
pub const xplm_key_flapsup: _bindgen_ty_41 = 61;
pub const xplm_key_flapsdn: _bindgen_ty_41 = 62;
pub const xplm_key_cheatoff: _bindgen_ty_41 = 63;
pub const xplm_key_cheaton: _bindgen_ty_41 = 64;
pub const xplm_key_sbrkoff: _bindgen_ty_41 = 65;
pub const xplm_key_sbrkon: _bindgen_ty_41 = 66;
pub const xplm_key_ailtrimL: _bindgen_ty_41 = 67;
pub const xplm_key_ailtrimR: _bindgen_ty_41 = 68;
pub const xplm_key_rudtrimL: _bindgen_ty_41 = 69;
pub const xplm_key_rudtrimR: _bindgen_ty_41 = 70;
pub const xplm_key_elvtrimD: _bindgen_ty_41 = 71;
pub const xplm_key_elvtrimU: _bindgen_ty_41 = 72;
pub const xplm_key_forward: _bindgen_ty_41 = 73;
pub const xplm_key_down: _bindgen_ty_41 = 74;
pub const xplm_key_left: _bindgen_ty_41 = 75;
pub const xplm_key_right: _bindgen_ty_41 = 76;
pub const xplm_key_back: _bindgen_ty_41 = 77;
pub const xplm_key_tower: _bindgen_ty_41 = 78;
pub const xplm_key_runway: _bindgen_ty_41 = 79;
pub const xplm_key_chase: _bindgen_ty_41 = 80;
pub const xplm_key_free1: _bindgen_ty_41 = 81;
pub const xplm_key_free2: _bindgen_ty_41 = 82;
pub const xplm_key_spot: _bindgen_ty_41 = 83;
pub const xplm_key_fullscrn1: _bindgen_ty_41 = 84;
pub const xplm_key_fullscrn2: _bindgen_ty_41 = 85;
pub const xplm_key_tanspan: _bindgen_ty_41 = 86;
pub const xplm_key_smoke: _bindgen_ty_41 = 87;
pub const xplm_key_map: _bindgen_ty_41 = 88;
pub const xplm_key_zoomin: _bindgen_ty_41 = 89;
pub const xplm_key_zoomout: _bindgen_ty_41 = 90;
pub const xplm_key_cycledump: _bindgen_ty_41 = 91;
pub const xplm_key_replay: _bindgen_ty_41 = 92;
pub const xplm_key_tranID: _bindgen_ty_41 = 93;
pub const xplm_key_max: _bindgen_ty_41 = 94;
pub type _bindgen_ty_41 = u32;
pub type XPLMCommandKeyID = ::std::os::raw::c_int;
pub const xplm_joy_nothing: _bindgen_ty_42 = 0;
pub const xplm_joy_start_all: _bindgen_ty_42 = 1;
pub const xplm_joy_start_0: _bindgen_ty_42 = 2;
pub const xplm_joy_start_1: _bindgen_ty_42 = 3;
pub const xplm_joy_start_2: _bindgen_ty_42 = 4;
pub const xplm_joy_start_3: _bindgen_ty_42 = 5;
pub const xplm_joy_start_4: _bindgen_ty_42 = 6;
pub const xplm_joy_start_5: _bindgen_ty_42 = 7;
pub const xplm_joy_start_6: _bindgen_ty_42 = 8;
pub const xplm_joy_start_7: _bindgen_ty_42 = 9;
pub const xplm_joy_throt_up: _bindgen_ty_42 = 10;
pub const xplm_joy_throt_dn: _bindgen_ty_42 = 11;
pub const xplm_joy_prop_up: _bindgen_ty_42 = 12;
pub const xplm_joy_prop_dn: _bindgen_ty_42 = 13;
pub const xplm_joy_mixt_up: _bindgen_ty_42 = 14;
pub const xplm_joy_mixt_dn: _bindgen_ty_42 = 15;
pub const xplm_joy_carb_tog: _bindgen_ty_42 = 16;
pub const xplm_joy_carb_on: _bindgen_ty_42 = 17;
pub const xplm_joy_carb_off: _bindgen_ty_42 = 18;
pub const xplm_joy_trev: _bindgen_ty_42 = 19;
pub const xplm_joy_trm_up: _bindgen_ty_42 = 20;
pub const xplm_joy_trm_dn: _bindgen_ty_42 = 21;
pub const xplm_joy_rot_trm_up: _bindgen_ty_42 = 22;
pub const xplm_joy_rot_trm_dn: _bindgen_ty_42 = 23;
pub const xplm_joy_rud_lft: _bindgen_ty_42 = 24;
pub const xplm_joy_rud_cntr: _bindgen_ty_42 = 25;
pub const xplm_joy_rud_rgt: _bindgen_ty_42 = 26;
pub const xplm_joy_ail_lft: _bindgen_ty_42 = 27;
pub const xplm_joy_ail_cntr: _bindgen_ty_42 = 28;
pub const xplm_joy_ail_rgt: _bindgen_ty_42 = 29;
pub const xplm_joy_B_rud_lft: _bindgen_ty_42 = 30;
pub const xplm_joy_B_rud_rgt: _bindgen_ty_42 = 31;
pub const xplm_joy_look_up: _bindgen_ty_42 = 32;
pub const xplm_joy_look_dn: _bindgen_ty_42 = 33;
pub const xplm_joy_look_lft: _bindgen_ty_42 = 34;
pub const xplm_joy_look_rgt: _bindgen_ty_42 = 35;
pub const xplm_joy_glance_l: _bindgen_ty_42 = 36;
pub const xplm_joy_glance_r: _bindgen_ty_42 = 37;
pub const xplm_joy_v_fnh: _bindgen_ty_42 = 38;
pub const xplm_joy_v_fwh: _bindgen_ty_42 = 39;
pub const xplm_joy_v_tra: _bindgen_ty_42 = 40;
pub const xplm_joy_v_twr: _bindgen_ty_42 = 41;
pub const xplm_joy_v_run: _bindgen_ty_42 = 42;
pub const xplm_joy_v_cha: _bindgen_ty_42 = 43;
pub const xplm_joy_v_fr1: _bindgen_ty_42 = 44;
pub const xplm_joy_v_fr2: _bindgen_ty_42 = 45;
pub const xplm_joy_v_spo: _bindgen_ty_42 = 46;
pub const xplm_joy_flapsup: _bindgen_ty_42 = 47;
pub const xplm_joy_flapsdn: _bindgen_ty_42 = 48;
pub const xplm_joy_vctswpfwd: _bindgen_ty_42 = 49;
pub const xplm_joy_vctswpaft: _bindgen_ty_42 = 50;
pub const xplm_joy_gear_tog: _bindgen_ty_42 = 51;
pub const xplm_joy_gear_up: _bindgen_ty_42 = 52;
pub const xplm_joy_gear_down: _bindgen_ty_42 = 53;
pub const xplm_joy_lft_brake: _bindgen_ty_42 = 54;
pub const xplm_joy_rgt_brake: _bindgen_ty_42 = 55;
pub const xplm_joy_brakesREG: _bindgen_ty_42 = 56;
pub const xplm_joy_brakesMAX: _bindgen_ty_42 = 57;
pub const xplm_joy_speedbrake: _bindgen_ty_42 = 58;
pub const xplm_joy_ott_dis: _bindgen_ty_42 = 59;
pub const xplm_joy_ott_atr: _bindgen_ty_42 = 60;
pub const xplm_joy_ott_asi: _bindgen_ty_42 = 61;
pub const xplm_joy_ott_hdg: _bindgen_ty_42 = 62;
pub const xplm_joy_ott_alt: _bindgen_ty_42 = 63;
pub const xplm_joy_ott_vvi: _bindgen_ty_42 = 64;
pub const xplm_joy_tim_start: _bindgen_ty_42 = 65;
pub const xplm_joy_tim_reset: _bindgen_ty_42 = 66;
pub const xplm_joy_ecam_up: _bindgen_ty_42 = 67;
pub const xplm_joy_ecam_dn: _bindgen_ty_42 = 68;
pub const xplm_joy_fadec: _bindgen_ty_42 = 69;
pub const xplm_joy_yaw_damp: _bindgen_ty_42 = 70;
pub const xplm_joy_art_stab: _bindgen_ty_42 = 71;
pub const xplm_joy_chute: _bindgen_ty_42 = 72;
pub const xplm_joy_JATO: _bindgen_ty_42 = 73;
pub const xplm_joy_arrest: _bindgen_ty_42 = 74;
pub const xplm_joy_jettison: _bindgen_ty_42 = 75;
pub const xplm_joy_fuel_dump: _bindgen_ty_42 = 76;
pub const xplm_joy_puffsmoke: _bindgen_ty_42 = 77;
pub const xplm_joy_prerotate: _bindgen_ty_42 = 78;
pub const xplm_joy_UL_prerot: _bindgen_ty_42 = 79;
pub const xplm_joy_UL_collec: _bindgen_ty_42 = 80;
pub const xplm_joy_TOGA: _bindgen_ty_42 = 81;
pub const xplm_joy_shutdown: _bindgen_ty_42 = 82;
pub const xplm_joy_con_atc: _bindgen_ty_42 = 83;
pub const xplm_joy_fail_now: _bindgen_ty_42 = 84;
pub const xplm_joy_pause: _bindgen_ty_42 = 85;
pub const xplm_joy_rock_up: _bindgen_ty_42 = 86;
pub const xplm_joy_rock_dn: _bindgen_ty_42 = 87;
pub const xplm_joy_rock_lft: _bindgen_ty_42 = 88;
pub const xplm_joy_rock_rgt: _bindgen_ty_42 = 89;
pub const xplm_joy_rock_for: _bindgen_ty_42 = 90;
pub const xplm_joy_rock_aft: _bindgen_ty_42 = 91;
pub const xplm_joy_idle_hilo: _bindgen_ty_42 = 92;
pub const xplm_joy_lanlights: _bindgen_ty_42 = 93;
pub const xplm_joy_max: _bindgen_ty_42 = 94;
pub type _bindgen_ty_42 = u32;
pub type XPLMCommandButtonID = ::std::os::raw::c_int;
pub const xplm_Host_Unknown: _bindgen_ty_43 = 0;
pub const xplm_Host_XPlane: _bindgen_ty_43 = 1;
pub const xplm_Host_PlaneMaker: _bindgen_ty_43 = 2;
pub const xplm_Host_WorldMaker: _bindgen_ty_43 = 3;
pub const xplm_Host_Briefer: _bindgen_ty_43 = 4;
pub const xplm_Host_PartMaker: _bindgen_ty_43 = 5;
pub const xplm_Host_YoungsMod: _bindgen_ty_43 = 6;
pub const xplm_Host_XAuto: _bindgen_ty_43 = 7;
pub type _bindgen_ty_43 = u32;
pub type XPLMHostApplicationID = ::std::os::raw::c_int;
pub const xplm_Language_Unknown: _bindgen_ty_44 = 0;
pub const xplm_Language_English: _bindgen_ty_44 = 1;
pub const xplm_Language_French: _bindgen_ty_44 = 2;
pub const xplm_Language_German: _bindgen_ty_44 = 3;
pub const xplm_Language_Italian: _bindgen_ty_44 = 4;
pub const xplm_Language_Spanish: _bindgen_ty_44 = 5;
pub const xplm_Language_Korean: _bindgen_ty_44 = 6;
pub const xplm_Language_Russian: _bindgen_ty_44 = 7;
pub const xplm_Language_Greek: _bindgen_ty_44 = 8;
pub const xplm_Language_Japanese: _bindgen_ty_44 = 9;
pub const xplm_Language_Chinese: _bindgen_ty_44 = 10;
pub type _bindgen_ty_44 = u32;
pub type XPLMLanguageCode = ::std::os::raw::c_int;
pub const xplm_DataFile_Situation: _bindgen_ty_45 = 1;
pub const xplm_DataFile_ReplayMovie: _bindgen_ty_45 = 2;
pub type _bindgen_ty_45 = u32;
pub type XPLMDataFileType = ::std::os::raw::c_int;
pub type XPLMError_f =
    ::std::option::Option<unsafe extern "C" fn(inMessage: *const ::std::os::raw::c_char)>;
extern "C" {
    pub fn XPLMSimulateKeyPress(inKeyType: ::std::os::raw::c_int, inKey: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XPLMSpeakString(inString: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn XPLMCommandKeyStroke(inKey: XPLMCommandKeyID);
}
extern "C" {
    pub fn XPLMCommandButtonPress(inButton: XPLMCommandButtonID);
}
extern "C" {
    pub fn XPLMCommandButtonRelease(inButton: XPLMCommandButtonID);
}
extern "C" {
    pub fn XPLMGetVirtualKeyDescription(
        inVirtualKey: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// X-PLANE MISC
    pub fn XPLMReloadScenery();
}
extern "C" {
    pub fn XPLMGetSystemPath(outSystemPath: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn XPLMGetPrefsPath(outPrefsPath: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn XPLMGetDirectorySeparator() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn XPLMExtractFileAndPath(
        inFullPath: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn XPLMGetDirectoryContents(
        inDirectoryPath: *const ::std::os::raw::c_char,
        inFirstReturn: ::std::os::raw::c_int,
        outFileNames: *mut ::std::os::raw::c_char,
        inFileNameBufSize: ::std::os::raw::c_int,
        outIndices: *mut *mut ::std::os::raw::c_char,
        inIndexCount: ::std::os::raw::c_int,
        outTotalFiles: *mut ::std::os::raw::c_int,
        outReturnedFiles: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMInitialized() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMGetVersions(
        outXPlaneVersion: *mut ::std::os::raw::c_int,
        outXPLMVersion: *mut ::std::os::raw::c_int,
        outHostID: *mut XPLMHostApplicationID,
    );
}
extern "C" {
    pub fn XPLMGetLanguage() -> XPLMLanguageCode;
}
extern "C" {
    pub fn XPLMDebugString(inString: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn XPLMSetErrorCallback(inCallback: XPLMError_f);
}
extern "C" {
    pub fn XPLMFindSymbol(inString: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn XPLMLoadDataFile(
        inFileType: XPLMDataFileType,
        inFilePath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMSaveDataFile(
        inFileType: XPLMDataFileType,
        inFilePath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const xplm_CommandBegin: _bindgen_ty_46 = 0;
pub const xplm_CommandContinue: _bindgen_ty_46 = 1;
pub const xplm_CommandEnd: _bindgen_ty_46 = 2;
pub type _bindgen_ty_46 = u32;
pub type XPLMCommandPhase = ::std::os::raw::c_int;
pub type XPLMCommandRef = *mut ::std::os::raw::c_void;
pub type XPLMCommandCallback_f =
    ::std::option::Option<
        unsafe extern "C" fn(inCommand: XPLMCommandRef,
                             inPhase: XPLMCommandPhase,
                             inRefcon: *mut ::std::os::raw::c_void)
                             -> ::std::os::raw::c_int,
    >;
extern "C" {
    pub fn XPLMFindCommand(inName: *const ::std::os::raw::c_char) -> XPLMCommandRef;
}
extern "C" {
    pub fn XPLMCommandBegin(inCommand: XPLMCommandRef);
}
extern "C" {
    pub fn XPLMCommandEnd(inCommand: XPLMCommandRef);
}
extern "C" {
    pub fn XPLMCommandOnce(inCommand: XPLMCommandRef);
}
extern "C" {
    pub fn XPLMCreateCommand(
        inName: *const ::std::os::raw::c_char,
        inDescription: *const ::std::os::raw::c_char,
    ) -> XPLMCommandRef;
}
extern "C" {
    pub fn XPLMRegisterCommandHandler(
        inComand: XPLMCommandRef,
        inHandler: XPLMCommandCallback_f,
        inBefore: ::std::os::raw::c_int,
        inRefcon: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn XPLMUnregisterCommandHandler(
        inComand: XPLMCommandRef,
        inHandler: XPLMCommandCallback_f,
        inBefore: ::std::os::raw::c_int,
        inRefcon: *mut ::std::os::raw::c_void,
    );
}
pub const xplm_Menu_NoCheck: _bindgen_ty_47 = 0;
pub const xplm_Menu_Unchecked: _bindgen_ty_47 = 1;
pub const xplm_Menu_Checked: _bindgen_ty_47 = 2;
pub type _bindgen_ty_47 = u32;
pub type XPLMMenuCheck = ::std::os::raw::c_int;
pub type XPLMMenuID = *mut ::std::os::raw::c_void;
pub type XPLMMenuHandler_f =
    ::std::option::Option<
        unsafe extern "C" fn(inMenuRef: *mut ::std::os::raw::c_void,
                             inItemRef: *mut ::std::os::raw::c_void),
    >;
extern "C" {
    pub fn XPLMFindPluginsMenu() -> XPLMMenuID;
}
extern "C" {
    pub fn XPLMFindAircraftMenu() -> XPLMMenuID;
}
extern "C" {
    pub fn XPLMCreateMenu(
        inName: *const ::std::os::raw::c_char,
        inParentMenu: XPLMMenuID,
        inParentItem: ::std::os::raw::c_int,
        inHandler: XPLMMenuHandler_f,
        inMenuRef: *mut ::std::os::raw::c_void,
    ) -> XPLMMenuID;
}
extern "C" {
    pub fn XPLMDestroyMenu(inMenuID: XPLMMenuID);
}
extern "C" {
    pub fn XPLMClearAllMenuItems(inMenuID: XPLMMenuID);
}
extern "C" {
    pub fn XPLMAppendMenuItem(
        inMenu: XPLMMenuID,
        inItemName: *const ::std::os::raw::c_char,
        inItemRef: *mut ::std::os::raw::c_void,
        inDeprecatedAndIgnored: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMAppendMenuItemWithCommand(
        inMenu: XPLMMenuID,
        inItemName: *const ::std::os::raw::c_char,
        inCommandToExecute: XPLMCommandRef,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMAppendMenuSeparator(inMenu: XPLMMenuID);
}
extern "C" {
    pub fn XPLMSetMenuItemName(
        inMenu: XPLMMenuID,
        inIndex: ::std::os::raw::c_int,
        inItemName: *const ::std::os::raw::c_char,
        inForceEnglish: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMCheckMenuItem(
        inMenu: XPLMMenuID,
        index: ::std::os::raw::c_int,
        inCheck: XPLMMenuCheck,
    );
}
extern "C" {
    pub fn XPLMCheckMenuItemState(
        inMenu: XPLMMenuID,
        index: ::std::os::raw::c_int,
        outCheck: *mut XPLMMenuCheck,
    );
}
extern "C" {
    pub fn XPLMEnableMenuItem(
        inMenu: XPLMMenuID,
        index: ::std::os::raw::c_int,
        enabled: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMRemoveMenuItem(inMenu: XPLMMenuID, inIndex: ::std::os::raw::c_int);
}
pub const xplm_Nav_Unknown: _bindgen_ty_48 = 0;
pub const xplm_Nav_Airport: _bindgen_ty_48 = 1;
pub const xplm_Nav_NDB: _bindgen_ty_48 = 2;
pub const xplm_Nav_VOR: _bindgen_ty_48 = 4;
pub const xplm_Nav_ILS: _bindgen_ty_48 = 8;
pub const xplm_Nav_Localizer: _bindgen_ty_48 = 16;
pub const xplm_Nav_GlideSlope: _bindgen_ty_48 = 32;
pub const xplm_Nav_OuterMarker: _bindgen_ty_48 = 64;
pub const xplm_Nav_MiddleMarker: _bindgen_ty_48 = 128;
pub const xplm_Nav_InnerMarker: _bindgen_ty_48 = 256;
pub const xplm_Nav_Fix: _bindgen_ty_48 = 512;
pub const xplm_Nav_DME: _bindgen_ty_48 = 1024;
pub const xplm_Nav_LatLon: _bindgen_ty_48 = 2048;
pub type _bindgen_ty_48 = u32;
pub type XPLMNavType = ::std::os::raw::c_int;
pub type XPLMNavRef = ::std::os::raw::c_int;
extern "C" {
    pub fn XPLMGetFirstNavAid() -> XPLMNavRef;
}
extern "C" {
    pub fn XPLMGetNextNavAid(inNavAidRef: XPLMNavRef) -> XPLMNavRef;
}
extern "C" {
    pub fn XPLMFindFirstNavAidOfType(inType: XPLMNavType) -> XPLMNavRef;
}
extern "C" {
    pub fn XPLMFindLastNavAidOfType(inType: XPLMNavType) -> XPLMNavRef;
}
extern "C" {
    pub fn XPLMFindNavAid(
        inNameFragment: *const ::std::os::raw::c_char,
        inIDFragment: *const ::std::os::raw::c_char,
        inLat: *mut f32,
        inLon: *mut f32,
        inFrequency: *mut ::std::os::raw::c_int,
        inType: XPLMNavType,
    ) -> XPLMNavRef;
}
extern "C" {
    pub fn XPLMGetNavAidInfo(
        inRef: XPLMNavRef,
        outType: *mut XPLMNavType,
        outLatitude: *mut f32,
        outLongitude: *mut f32,
        outHeight: *mut f32,
        outFrequency: *mut ::std::os::raw::c_int,
        outHeading: *mut f32,
        outID: *mut ::std::os::raw::c_char,
        outName: *mut ::std::os::raw::c_char,
        outReg: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    /// FLIGHT MANAGEMENT COMPUTER
    pub fn XPLMCountFMSEntries() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMGetDisplayedFMSEntry() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMGetDestinationFMSEntry() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMSetDisplayedFMSEntry(inIndex: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XPLMSetDestinationFMSEntry(inIndex: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XPLMGetFMSEntryInfo(
        inIndex: ::std::os::raw::c_int,
        outType: *mut XPLMNavType,
        outID: *mut ::std::os::raw::c_char,
        outRef: *mut XPLMNavRef,
        outAltitude: *mut ::std::os::raw::c_int,
        outLat: *mut f32,
        outLon: *mut f32,
    );
}
extern "C" {
    pub fn XPLMSetFMSEntryInfo(
        inIndex: ::std::os::raw::c_int,
        inRef: XPLMNavRef,
        inAltitude: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMSetFMSEntryLatLon(
        inIndex: ::std::os::raw::c_int,
        inLat: f32,
        inLon: f32,
        inAltitude: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMClearFMSEntry(inIndex: ::std::os::raw::c_int);
}
extern "C" {
    /// GPS RECEIVER
    pub fn XPLMGetGPSDestinationType() -> XPLMNavType;
}
extern "C" {
    pub fn XPLMGetGPSDestination() -> XPLMNavRef;
}
extern "C" {
    /// USER AIRCRAFT ACCESS
    pub fn XPLMSetUsersAircraft(inAircraftPath: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn XPLMPlaceUserAtAirport(inAirportCode: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn XPLMPlaceUserAtLocation(
        latitudeDegrees: f64,
        longitudeDegrees: f64,
        elevationMetersMSL: f32,
        headingDegreesTrue: f32,
        speedMetersPerSecond: f32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPLMPlaneDrawState_t {
    pub structSize: ::std::os::raw::c_int,
    pub gearPosition: f32,
    pub flapRatio: f32,
    pub spoilerRatio: f32,
    pub speedBrakeRatio: f32,
    pub slatRatio: f32,
    pub wingSweep: f32,
    pub thrust: f32,
    pub yokePitch: f32,
    pub yokeHeading: f32,
    pub yokeRoll: f32,
}
extern "C" {
    pub fn XPLMCountAircraft(
        outTotalAircraft: *mut ::std::os::raw::c_int,
        outActiveAircraft: *mut ::std::os::raw::c_int,
        outController: *mut XPLMPluginID,
    );
}
extern "C" {
    pub fn XPLMGetNthAircraftModel(
        inIndex: ::std::os::raw::c_int,
        outFileName: *mut ::std::os::raw::c_char,
        outPath: *mut ::std::os::raw::c_char,
    );
}
/// EXCLUSIVE AIRCRAFT ACCESS
pub type XPLMPlanesAvailable_f =
    ::std::option::Option<unsafe extern "C" fn(inRefcon: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn XPLMAcquirePlanes(
        inAircraft: *mut *mut ::std::os::raw::c_char,
        inCallback: XPLMPlanesAvailable_f,
        inRefcon: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMReleasePlanes();
}
extern "C" {
    pub fn XPLMSetActiveAircraftCount(inCount: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XPLMSetAircraftModel(
        inIndex: ::std::os::raw::c_int,
        inAircraftPath: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn XPLMDisableAIForPlane(inPlaneIndex: ::std::os::raw::c_int);
}
extern "C" {
    pub fn XPLMDrawAircraft(
        inPlaneIndex: ::std::os::raw::c_int,
        inX: f32,
        inY: f32,
        inZ: f32,
        inPitch: f32,
        inRoll: f32,
        inYaw: f32,
        inFullDraw: ::std::os::raw::c_int,
        inDrawStateInfo: *mut XPLMPlaneDrawState_t,
    );
}
extern "C" {
    pub fn XPLMReinitUsersPlane();
}
extern "C" {
    /// FINDING PLUGINS
    pub fn XPLMGetMyID() -> XPLMPluginID;
}
extern "C" {
    pub fn XPLMCountPlugins() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMGetNthPlugin(inIndex: ::std::os::raw::c_int) -> XPLMPluginID;
}
extern "C" {
    pub fn XPLMFindPluginByPath(inPath: *const ::std::os::raw::c_char) -> XPLMPluginID;
}
extern "C" {
    pub fn XPLMFindPluginBySignature(inSignature: *const ::std::os::raw::c_char) -> XPLMPluginID;
}
extern "C" {
    pub fn XPLMGetPluginInfo(
        inPlugin: XPLMPluginID,
        outName: *mut ::std::os::raw::c_char,
        outFilePath: *mut ::std::os::raw::c_char,
        outSignature: *mut ::std::os::raw::c_char,
        outDescription: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    /// ENABLING/DISABLING PLUG-INS
    pub fn XPLMIsPluginEnabled(inPluginID: XPLMPluginID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMEnablePlugin(inPluginID: XPLMPluginID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMDisablePlugin(inPluginID: XPLMPluginID);
}
extern "C" {
    pub fn XPLMReloadPlugins();
}
extern "C" {
    pub fn XPLMSendMessageToPlugin(
        inPlugin: XPLMPluginID,
        inMessage: ::std::os::raw::c_int,
        inParam: *mut ::std::os::raw::c_void,
    );
}
/// Plugin Features API
pub type XPLMFeatureEnumerator_f =
    ::std::option::Option<
        unsafe extern "C" fn(inFeature: *const ::std::os::raw::c_char,
                             inRef: *mut ::std::os::raw::c_void),
    >;
extern "C" {
    pub fn XPLMHasFeature(inFeature: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMIsFeatureEnabled(inFeature: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMEnableFeature(
        inFeature: *const ::std::os::raw::c_char,
        inEnable: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn XPLMEnumerateFeatures(
        inEnumerator: XPLMFeatureEnumerator_f,
        inRef: *mut ::std::os::raw::c_void,
    );
}
pub const xplm_FlightLoop_Phase_BeforeFlightModel: _bindgen_ty_49 = 0;
pub const xplm_FlightLoop_Phase_AfterFlightModel: _bindgen_ty_49 = 1;
pub type _bindgen_ty_49 = u32;
pub type XPLMFlightLoopPhaseType = ::std::os::raw::c_int;
pub type XPLMFlightLoopID = *mut ::std::os::raw::c_void;
pub type XPLMFlightLoop_f =
    ::std::option::Option<
        unsafe extern "C" fn(inElapsedSinceLastCall: f32,
                             inElapsedTimeSinceLastFlightLoop: f32,
                             inCounter: ::std::os::raw::c_int,
                             inRefcon: *mut ::std::os::raw::c_void)
                             -> f32,
    >;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPLMCreateFlightLoop_t {
    pub structSize: ::std::os::raw::c_int,
    pub phase: XPLMFlightLoopPhaseType,
    pub callbackFunc: XPLMFlightLoop_f,
    pub refcon: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn XPLMGetElapsedTime() -> f32;
}
extern "C" {
    pub fn XPLMGetCycleNumber() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPLMRegisterFlightLoopCallback(
        inFlightLoop: XPLMFlightLoop_f,
        inInterval: f32,
        inRefcon: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn XPLMUnregisterFlightLoopCallback(
        inFlightLoop: XPLMFlightLoop_f,
        inRefcon: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn XPLMSetFlightLoopCallbackInterval(
        inFlightLoop: XPLMFlightLoop_f,
        inInterval: f32,
        inRelativeToNow: ::std::os::raw::c_int,
        inRefcon: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn XPLMCreateFlightLoop(inParams: *mut XPLMCreateFlightLoop_t) -> XPLMFlightLoopID;
}
extern "C" {
    pub fn XPLMDestroyFlightLoop(inFlightLoopID: XPLMFlightLoopID);
}
extern "C" {
    pub fn XPLMScheduleFlightLoop(
        inFlightLoopID: XPLMFlightLoopID,
        inInterval: f32,
        inRelativeToNow: ::std::os::raw::c_int,
    );
}
